<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ko" xmlns="http://www.w3.org/2005/Atom"><title>Rebooting Reiot</title><link href="http://reiot.com" rel="alternate"></link><link href="http://reiot.com/atom.xml" rel="self"></link><id>http://reiot.com</id><updated>2012-10-11T21:29:57Z</updated><author><name>Ray Yun</name></author><entry><title>C++11</title><link href="/2012/10/11/c++11/" rel="alternate"></link><updated>2012-10-11T21:29:57Z</updated><id>tag:None,2012-10-11:/2012/10/11/c++11//</id><summary type="html">&lt;p&gt;C++에 손을 뗀지 어언 3년, 그동안 C++0x이니 C++11 같은 게 정말 좋아졌다고 하긴 하는데, 한눈에 알아볼 수 있는 &lt;strong&gt;한글&lt;/strong&gt; 사이트가 없기에 한번 정리해봤다. 위키피디아 문서를 기준으로 요약, 번역한 것이니 틀린 점이 있으면 너그럽게 지적해주기 바란다.&lt;/p&gt;
&lt;p&gt;아래 샘플 코드들을 Xcode 4.5에서 &lt;code&gt;Apple LLVM 4.1&lt;/code&gt;과 &lt;code&gt;--std=c++11&lt;/code&gt;, &lt;code&gt;--stdlib=libc++&lt;/code&gt; 옵션으로 테스트 했음을 밝힌다.&lt;/p&gt;
&lt;h2&gt;요약&lt;/h2&gt;
&lt;p&gt;C++ 11 의 언어 레벨에서의 개선 사항은 대충 다음과 같이 요약할 수 있다.&lt;/p&gt;
&lt;table class="table table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;키워드&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;rvalue 참조 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auto&lt;/td&gt;
&lt;td&gt;컴파일러가 유추해낼 수 있는 자동 타입. any 와는 다르다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char16_t, char_32_t&lt;/td&gt;
&lt;td&gt;UTF-16 과 UTF-32 타입과 리터럴 선언&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;constexpr&lt;/td&gt;
&lt;td&gt;이름 그대로 상수 + 식&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;decltype&lt;/td&gt;
&lt;td&gt;변수 이름으로 타입을 알아내어서 선언 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;noexcept&lt;/td&gt;
&lt;td&gt;어떤 함수가 예외를 던지는지의 여부를 지정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nullptr&lt;/td&gt;
&lt;td&gt;NULL 포인터 상수&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;static_assert&lt;/td&gt;
&lt;td&gt;assert 의 정적 버전&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread_local&lt;/td&gt;
&lt;td&gt;쓰레드 로컬 저장소를 사용하는 변수 지정자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;using&lt;/td&gt;
&lt;td&gt;type aliasing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;override&lt;/td&gt;
&lt;td&gt;가상 함수의 상속 여부 지정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alignas, alignof&lt;/td&gt;
&lt;td&gt;구조체나 클래스의 메모리 정렬 단위를 지정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;final&lt;/td&gt;
&lt;td&gt;가상 함수나 클래스의 상속 불가능 여부 지정&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;표준 라이브러리 역시 많이 개선되었다. 그 중에서 핵심적인 부분들을 살펴보면,&lt;/p&gt;
&lt;table class="table table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;클래스/함수&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;std::initializer_list&lt;/td&gt;
&lt;td&gt;초기화 리스트&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::thread, future, promise, async&lt;/td&gt;
&lt;td&gt;쓰레드 관련 클래스들&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::function&lt;/td&gt;
&lt;td&gt;함수 객체&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::regex&lt;/td&gt;
&lt;td&gt;정규식&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::unordered_map&lt;/td&gt;
&lt;td&gt;O(1) 짜리 해시맵&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::tuple&lt;/td&gt;
&lt;td&gt;튜플&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::forward_list&lt;/td&gt;
&lt;td&gt;단방향 리스트&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::array&lt;/td&gt;
&lt;td&gt;배열&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::atomic&lt;/td&gt;
&lt;td&gt;lockless 연산을 위한 클래스&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;rvalue 참조 연산자 &amp;amp;&amp;amp;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;class A {
    char* buf;
    int size;
    // move constructor
    A(A&amp;amp;&amp;amp; a): buf(a.buf), size(a.size) { a.buf=0; a.size=0; }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;주로 임시 객체가 만들어질 때 불필요한 메모리 할당이나 버퍼 복사로 인한 성능 저하를 막기 위해, 파라미터의 내부값 전체를 이동시켜 버리는 용도다. 많은 STL 컨테이너들이 성능을 위해서 이런 이동 생성자(move constructor)와 이동 대입연산자(move assignment operator)을 구현했다는데, 평범한 개발자가 쓸 일은 드물 듯.&lt;/p&gt;
&lt;p&gt;더 많은 내용은 &lt;a href="http://msdn.microsoft.com/en-us/library/dd293665.aspx"&gt;MSDN&lt;/a&gt; 참조.&lt;/p&gt;
&lt;h2&gt;constexpr&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;constexpr int get_five() {return 5;}
int some_value[get_five() + 7];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;constexpr&lt;/code&gt;을 붙이면 일반 변수나 함수도 컴파일 타임 상수로 쓸 수 있다. 단 함수일 경우 내부에 리턴문만 있어야 한다.&lt;/p&gt;
&lt;h3&gt;템플릿의 Extern 선언&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;extern template class std::vector&amp;lt;MyClass&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 특수화된 템플릿 클래스의 extern 선언이 가능해졌다. 단 한 군데에서만 컴파일하게 되므로 컴파일 시간도 빨라졌다.&lt;/p&gt;
&lt;h3&gt;리스트 초기화&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;class SequenceClass {
public:
    SequenceClass(std::initializer_list&amp;lt;int&amp;gt; list);
};
SequenceClass some_var = {1, 4, 5, 6};

void function_name(std::initializer_list&amp;lt;float&amp;gt; list);
function_name({1.0f, -3.45f, -0.4f});

std::vector&amp;lt;std::string&amp;gt; v = { &amp;quot;xyzzy&amp;quot;, &amp;quot;plugh&amp;quot;, &amp;quot;abracadabra&amp;quot; };

struct AltStruct {
    AltStruct(int x, double y) : x_{x}, y_{y} {}

private:
    int x_;
    double y_;
};

AltStruct var2{2, 4.3};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;새롭게 추가된 &lt;code&gt;initializer_list&lt;/code&gt;를 이용하면, 리스트로 객체를 초기화하거나 파라미터로도 넘길 수 있고, 생성자를 대체할 수도 있다. 맨 마지막 문법은 좀 손가락이 꼬이는 느낌.&lt;/p&gt;
&lt;h3&gt;auto 와 decltype&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;auto some_type = boost::bind(&amp;amp;some_function, _2, _1, some_object);
decltype(some_type) other_type = some_type;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;템플릿 메타 프로그래밍에서는 리턴값을 알기 힘든 경우가 많은데, 이때 auto로 변수를 선언하면 컴파일러가 자동으로 타입을 찾아준다. &lt;code&gt;decltype&lt;/code&gt;은 변수만으로도 타입을 추론해낼 수 있다.&lt;/p&gt;
&lt;p&gt;덕분에, iterator를 사용하는 for 루프는 정말 간단해질 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for (std::vector&amp;lt;int&amp;gt;::const_iterator itr = myvec.cbegin(); itr != myvec.cend(); ++itr)

for (auto itr = myvec.cbegin(); itr != myvec.cend(); ++itr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;auto 를 리턴하는 함수의 경우, &lt;code&gt;-&amp;gt;&lt;/code&gt; 를 이용해서 타입을 컴파일러에게 친절하게 알려줄 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct SomeStruct  {
    auto func_name(int x, int y) -&amp;gt; int;
};

auto SomeStruct::func_name(int x, int y) -&amp;gt; int {
    return x + y;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;범위 기반 for 루프&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;int my_array[5] = {1, 2, 3, 4, 5};
for (int &amp;amp;x : my_array) {
    x *= 2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;배열, 초기화 리스트, begin/end가 정의된 컨테이너 등 컴파일러가 범위를 알 수 있을 듯한 컬렉션들에 한해서만 가능하다. in 연산자를 지원해주면 참 좋겠지만...&lt;/p&gt;
&lt;h3&gt;람다식과 람다 함수&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[](int x, int y) { return x + y; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;함수명에 &lt;code&gt;[]&lt;/code&gt;을 쓰면, 람다 함수로 사용할 수 있다. 리턴값은 자동적으로 추론된다고 한다.&lt;/p&gt;
&lt;h3&gt;생성자 관련 개선&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;class SomeType  {
    int number;
    int value = 5;
public:
    SomeType(int new_number) : number(new_number) {}
    SomeType() : SomeType(42) {}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;생성자에서 다른 생성자를 호출할 수 있게 되었고, 데이터 멤버도 클래스 선언시에 초기값을 가질 수 있다.&lt;/p&gt;
&lt;h3&gt;override &amp;amp; final&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;struct Base {
    virtual void some_func(float);
};

struct Derived : Base {
    virtual void some_func(int) override; // ill-formed because it doesn't override a base class method
};

struct Base1 final { };
struct Base2 {
    virtual void f() final;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c# 이나 자바 같은 언어에서 오래전부터 지원하던 override 와 final 지정자가 드디어 표준이 되었다. final 은 클래스에 대해서도 사용 가능하다.&lt;/p&gt;
&lt;h3&gt;널 포인터 상수 nullptr&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;char *pc = nullptr;     // OK
int  *pi = nullptr;     // OK
bool   b = nullptr;     // OK. b is false.
int    i = nullptr;     // error

foo(nullptr);           // calls foo(char *), not foo(int);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NULL 이 0 과 혼용되면서 생긴 문제 때문에, 포인터에 대한 전용 상수인 nullptr이 추가되었다.&lt;/p&gt;
&lt;h3&gt;열거자의 타입 지정&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;enum class Enum2 : unsigned int {Val1, Val2};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;예전 열거자는 컴파일러 구현에 따라서 int 도 되고, unsigned int 도 되었다. 새 열거자 선언 방식에서는 기본적으로 int이고, 별도로 타입을 지정할 수도 있지만, 정수로 암묵적으로 변환되지는 않는다.&lt;/p&gt;
&lt;h3&gt;using&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;template &amp;lt;typename First, typename Second, int Third&amp;gt;
class SomeType;

template &amp;lt;typename Second&amp;gt;
using TypedefName = SomeType&amp;lt;OtherType, Second, 5&amp;gt;;

typedef void (*Type)(double);       // Old style
using OtherType = void (*)(double);     // New introduced syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;매크로나 typdef 대신 using 을 이용해서 긴 템플릿 이름을 짧게 줄일 수 있다.&lt;/p&gt;
&lt;h3&gt;가변 갯수 템플릿 인자&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;template&amp;lt;typename... Arguments&amp;gt;
void SampleFunction(Arguments... parameters);

SampleFunction&amp;lt;int, int&amp;gt;(16, 24);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;세상에나, 템플릿 인자도 가변적으로 받을 수 있구나. &lt;a href="http://www.cplusplus.com/articles/EhvU7k9E/"&gt;여기&lt;/a&gt; 참조.&lt;/p&gt;
&lt;h3&gt;union 개선&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;new&amp;gt; // Required for placement 'new'.
//
struct Point {
    Point() {}
    Point(int x, int y): x_(x), y_(y) {}
    int x_, y_;
};
//
union U {
    int z;
    double w;
    Point p; // Illegal in C++03; legal in C++11.
    //
    // Due to the Point member, a constructor definition is now required.
    //
    U() {new(&amp;amp;p) Point();}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;union 에 non-trivial 생성자를 가진 클래스를 담을 수 없던 제약이 풀렸다. 근데 이런 거 쓰는 사람이 있나.&lt;/p&gt;
&lt;h3&gt;유니코드 문자열 선언&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;const char* a = u8&amp;quot;I'm a UTF-8 string.&amp;quot;;
const char16_t* b = u&amp;quot;This is a UTF-16 string.&amp;quot;;
const char32_t* c = U&amp;quot;This is a UTF-32 string.&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제, utf-8 문자열을 하드코딩할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const char* d = R&amp;quot;(The String Data \ Stuff &amp;quot; )&amp;quot;;
const char* e = u8R&amp;quot;XXX(I'm a &amp;quot;raw UTF-8&amp;quot; string.)XXX&amp;quot;;
const char16_t* f = uR&amp;quot;*(This is a &amp;quot;raw UTF-16&amp;quot; string.)*&amp;quot;;
const char32_t* g = UR&amp;quot;(This is a &amp;quot;raw UTF-32&amp;quot; string.)&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;정규식을 위한 raw 문자열도 추가되었다. 단, R 만 붙이는게 아니라 따옴표와 괄호까지가 필수적이라서, 첫번째 괄호와 마지막 괄호 내부의 문자열 escape 되지 않게 된다.&lt;/p&gt;
&lt;h3&gt;멤버 함수 삭제&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;struct NonCopyable {
    NonCopyable &amp;amp; operator=(const NonCopyable&amp;amp;) = delete;
    NonCopyable(const NonCopyable&amp;amp;) = delete;
    NonCopyable() = default;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;컴파일러가 자동으로 만들어주던 기본 생성자와 복사 생성자, 기본 소멸자 및 대입 연산자에 대해서 명시적으로 default 또는 deleted 를 지정할 수 있게 되었다. 물론 일반 멤버 함수에 대해서도 가능하다.&lt;/p&gt;
&lt;h3&gt;컴파일 시간 assertions&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;static_assert((GREEKPI &amp;gt; 3.14) &amp;amp;&amp;amp; (GREEKPI &amp;lt; 3.15), &amp;quot;GREEKPI is inaccurate!&amp;quot;);

template&amp;lt;class T&amp;gt;
struct Check  {
    static_assert(sizeof(int) &amp;lt;= sizeof(T), &amp;quot;T is not big enough!&amp;quot;);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;된다!&lt;/p&gt;
&lt;h3&gt;sizeof 개선&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;struct SomeType { OtherType member; };

sizeof(SomeType::member); //Does not work with C++03. Okay with C++11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;데이터 멤버에 대한 &lt;code&gt;sizeof&lt;/code&gt; 가 가능해졌다.&lt;/p&gt;
&lt;h3&gt;동적 메모리 관리(Garbage Collection)&lt;/h3&gt;
&lt;p&gt;컴파일러에 따라 동적 메모리를 자동으로 관리할 수 있게 되었다. 물론 수동으로 관리하는 방법도 제공한다.&lt;/p&gt;
&lt;h3&gt;쓰레드 관련&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;std::thread&lt;/code&gt; 클래스가 지원되고 다음과 같은 쓰레드간 동기화 프리미티브들이 포함되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::mutex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::recursive_mutex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::condition_variable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::condition_variable_any&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::lock_guard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::unique_lock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;std::atomic&amp;lt;bool&amp;gt; ready(false);
std::atomic&amp;lt;int&amp;gt; data(0);

// Thread 0:
data.store(1, std::memory_order_release);
ready.store(true, std::memory_order_release);

// Thread 1:
if (ready.load(std::memory_order_acquire))
    assert(data.load(std::memory_order_acquire) == 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;보다 가벼운 원자적 연산(atomic operation)도 드디어 표준으로 채택되었다. 윈도우의 &lt;code&gt;InterlockedIncrement()&lt;/code&gt; 류라고 보면 된다. 메모리 정렬은 좀 헷갈리니 &lt;a href="http://en.cppreference.com/w/cpp/atomic/memory_order"&gt;여기&lt;/a&gt;를 참조.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;std::packaged_task&amp;lt;int()&amp;gt; task([](){ return 7; }); // wrap the function
std::future&amp;lt;int&amp;gt; f1 = task.get_future();  // get a future
std::thread(std::move(task)).detach(); // launch on a thread
f1.wait();
std::cout &amp;lt;&amp;lt; f1.get() &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;std::packaged_task&lt;/code&gt;를 이용하면, 비동기로 함수를 실행하고, 그 결과가 끝날 때까지 대기할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;std::future&amp;lt;int&amp;gt; f2 = std::async(std::launch::async, [](){ return 8; });
f2.wait();
std::cout &amp;lt;&amp;lt; f2.get() &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;std::async&lt;/code&gt; 역시 future 를 리턴하지만, 자동으로 쓰레드를 만들고 함수를 실행해준다.&lt;/p&gt;
&lt;h3&gt;튜플&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;typedef std::tuple &amp;lt;int, double, long &amp;amp;, const char *&amp;gt; test_tuple;
long lengthy = 12;
test_tuple proof (18, 6.5, lengthy, &amp;quot;Ciao!&amp;quot;);

lengthy = std::get&amp;lt;0&amp;gt;(proof);  // Assign to 'lengthy' the value 18.
std::get&amp;lt;3&amp;gt;(proof) = &amp;quot; Beautiful!&amp;quot;;  // Modify the tuple’s fourth element.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;가변 인자 템플릿 덕분에 튜플의 인자 갯수 제한이 풀렸다.&lt;/p&gt;
&lt;h3&gt;unordered 해시 테이블&lt;/h3&gt;
&lt;p&gt;기존의 map 과 set 은 정렬된 트리를 사용하므로 검색에 &lt;code&gt;O(log N)&lt;/code&gt;이 걸리지만, unordered 는 메모리를 좀 더 쓰는 대신 &lt;code&gt;O(1)&lt;/code&gt;로 요소를 찾을 수 있다.&lt;/p&gt;
&lt;table class="table table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type of hash table&lt;/th&gt;
&lt;th&gt;Associated values&lt;/th&gt;
&lt;th&gt;Equivalent keys&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;std::unordered_set&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::unordered_multiset&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::unordered_map&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::unordered_multimap&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;정규식&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;std::regex rgx(R&amp;quot;([ ,.\t\n;:])&amp;quot;);
std::cmatch match;
if( std::regex_search( &amp;quot;Unseen University - Ankh-Morpork&amp;quot;, match, rgx ) ) {
    for( size_t a = 0; a &amp;lt; match.size(); a++ ) {
        std::string str( match[a].first, match[a].second );
        std::cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C++ 에서 정규식이 된다니 감개가 무량하다...&lt;/p&gt;
&lt;h3&gt;스마트 포인터&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;std::auto_ptr&lt;/code&gt;은 사라지고, &lt;code&gt;std::unique_ptr&lt;/code&gt;, &lt;code&gt;std::shared_ptr&lt;/code&gt; 그리고 and &lt;code&gt;std::weak_ptr&lt;/code&gt;이 표준에 합류했다.&lt;/p&gt;
&lt;h3&gt;ref&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;void func (int &amp;amp;r)  { r++; }
template&amp;lt;class F, class P&amp;gt; void g (F f, P t)  { f(t); }

int i = 0 ;
g (func, i) ;
std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;  // Output -&amp;gt; 0

g (func, std::ref(i));
std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;  // Output -&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;임의의 객체의 레퍼런스를 얻어내는 &lt;code&gt;ref&lt;/code&gt;와 &lt;code&gt;cref&lt;/code&gt;가 추가되었다.&lt;/p&gt;
&lt;h3&gt;std::function&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;struct Foo {
    Foo(int num) : num_(num) {}
    void print_add(int i) const { std::cout &amp;lt;&amp;lt; num_+i &amp;lt;&amp;lt; '\n'; }
    int num_;
};

void print_num(int i)
{
    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; '\n';
}

std::function&amp;lt;void(int)&amp;gt; f1 = print_num;
std::function&amp;lt;void()&amp;gt; f2 = []() { print_num(42); };
std::function&amp;lt;void()&amp;gt; f3 = std::bind(print_num, 31337);
std::function&amp;lt;void(const Foo&amp;amp;, int)&amp;gt; f4 = &amp;amp;Foo::print_add;
Foo foo(314159);
f4(foo, 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;함수 객체는 일반적인 함수 포인터 뿐만 아니라, 람다 함수, 멤버 함수, bind식까지 담을 수 있다.&lt;/p&gt;
&lt;h3&gt;기타&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;템플릿 선언할 때 일부러 &lt;code&gt;&amp;gt; &amp;gt;&lt;/code&gt; 띄워쓰지 않아도 컴파일러가 잘 처리해준다.&lt;/li&gt;
&lt;li&gt;변환 연산자(conversion operator)에도 &lt;code&gt;explicit&lt;/code&gt; 를 붙일 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_local&lt;/code&gt; 지시를 붙이면 쓰레드 로컬 변수를 선언할 수 있다.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>DropPress</title><link href="/2012/09/16/droppress/" rel="alternate"></link><updated>2012-09-16T08:19:35Z</updated><id>tag:None,2012-09-16:/2012/09/16/droppress//</id><summary type="html">&lt;p&gt;&lt;a href="http://github.com/Reiot/droppress"&gt;DropPress&lt;/a&gt;는 이번에 다 죽어있던 블로그를 개편하면서 만든 정적 사이트 생성 스크립트다.&lt;/p&gt;
&lt;p&gt;왜 이름이 DropPress 이냐면, 이 프로젝트의 시작은 드랍박스를 연동하는 웹서비스였기 때문이다. 드랍박스에 마크다운 포맷의 글을 저장해두면, 버전관리를 안해도 되고, 드랍박스와 연동되는 훌륭한 편집기가 널려 있으니, 나는 마크다운 변환과 github 배포를 구현하기만 하면 된다고 생각했다. 그런데, 비슷한 웹 에디터나 호스팅 서비스도 이미 존재하길래, 목표를 간단한 스크립트로 바꿨다. :)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Reiot/droppress"&gt;소스코드&lt;/a&gt;는 github에 공개되어 있다.&lt;/p&gt;
&lt;h2&gt;기능 소개&lt;/h2&gt;
&lt;p&gt;웬만한 블로그에 있는 기본적인 기능(이라고 하면 부끄럽지만)은 대충 다 구현했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;페이지 네비게이션, 아카이브, 카테고리, 태그, RSS, 최근 글목록&lt;/li&gt;
&lt;li&gt;disqus 기반의 코멘트&lt;/li&gt;
&lt;li&gt;google analytics 연동&lt;/li&gt;
&lt;li&gt;글 제목 검색&lt;/li&gt;
&lt;li&gt;쉘 명령 지원: Octopress처럼 init, generate, clean, deploy, new_post 같은 쉘 명령을 지원한다. new_post 의 경우 새 파일을 만든 후 서브라임 텍스트2에 띄워준다. 원래는 Makefile을 쓰려다가 파일 갯수를 줄인다는(?) 취지에서 그냥 파이썬으로 모두 구현해 버렸다.&lt;/li&gt;
&lt;li&gt;wordpress 변환기&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;구현&lt;/h2&gt;
&lt;p&gt;파이썬 스크립트 자체는 몇 줄 안되는데도 봐줄만하게 나온 이유는 트위터 부트스트랩 덕분이다. 이런 라이브러리가 &lt;a href="http://www.quora.com/Twitter-Bootstrap/Do-Mark-Otto-and-Jacob-Thornton-work-on-Bootstrap-full-time-at-Twitter"&gt;전업이 아니라 주말 작업만으로 나왔다&lt;/a&gt;니, 진짜 대단한 친구들이다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://octopress.org"&gt;octopress&lt;/a&gt;에서 영감을 많이 받아서 글 헤더의 포맷이나 형태, 구조, 쉘 명령 등을 많이 참조했다. 얘들이 업데이트만 자주 했더라도 내가 안만들었을텐데..&lt;/p&gt;
&lt;table class="table table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;라이브러리&lt;/th&gt;
&lt;th&gt;적용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://twitter.github.com/bootstrap"&gt;twitter bootstrap&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;HTML 레이아웃 및 웹 디자인. 페이지 곳곳마다 진짜 열심히 사용했다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://bootswatch.com"&gt;bootstwatch&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;부트스트랩의 무료 테마. 현재 &lt;a href="http://bootswatch.com/readable"&gt;readable&lt;/a&gt; 테마를 사용중이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python-markdown&lt;/td&gt;
&lt;td&gt;마크다운 변환. 테이블을 지원하는 플러그인도 존재한다. :)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jinja2&lt;/td&gt;
&lt;td&gt;파이썬용 HTML 템플릿 라이브러리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yaml&lt;/td&gt;
&lt;td&gt;설정 파일 및 글의 헤더 포맷&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;feedgenerator&lt;/td&gt;
&lt;td&gt;atom.xml 생성용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;google-code-prettifier&lt;/td&gt;
&lt;td&gt;자바스크립트 코드 하일라이팅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;locally&lt;/td&gt;
&lt;td&gt;테스트용 로컬 웹서버(node.js 필요)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;향후 계획&lt;/h2&gt;
&lt;p&gt;위에서도 밝혔지만 이제 블로그 생성기로서의 웬만한 기능은 이미 다 구현했고, 뭔가를 더 추가한다면&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;더 많은 설치 및 배포 테스트: 아직 제대로 안해봤다.&lt;/li&gt;
&lt;li&gt;트위터 위젯 연동&lt;/li&gt;
&lt;li&gt;ACE 에디터로 드랍박스 API연동해서 웹 편집하기&lt;/li&gt;
&lt;li&gt;최종적으로는 웹 서비스 기반의 배포 시스템&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;정도가 남은 셈이다. 근데 과연 거기까지 갈지가 의문이다.&lt;/p&gt;
&lt;p&gt;그나저나, 실컷 끝내고 나니 왠지 바퀴만 재발명한 거 같은 생각이 든다. 좀 더 컨텐츠에 집중해야 되는데..&lt;/p&gt;</summary></entry><entry><title>Asrock P67 Extreme4 Gen3 에 산사자 설치하기</title><link href="/2012/08/05/install-mountain-lion-on-asrock-p67-extreme4-gen3/" rel="alternate"></link><updated>2012-08-05T21:27:28Z</updated><id>tag:None,2012-08-05:/2012/08/05/install-mountain-lion-on-asrock-p67-extreme4-gen3//</id><summary type="html">&lt;p&gt;며칠간의 삽질 끝에 집에 있는 데스크탑에 산사자를 설치했다. 이놈의 사양은&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M/B: Asrock P67 Extreme4 Gen3&lt;/li&gt;
&lt;li&gt;Audio: Onboard ALC892&lt;/li&gt;
&lt;li&gt;Lan: Onboard Realtek Gigabit Ethernet&lt;/li&gt;
&lt;li&gt;VGA: NVidia Geforce GTX 560 Ti&lt;/li&gt;
&lt;li&gt;RAM: 8G&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이다. 요즘 대세인 tonymacx86의 Unibeast를 사용하면 아주 간단하게 설치할 수 있다. 까먹을까봐 정리해본다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unibeast 1.5.2에 정품 산사자를 설치. Legacy USB 옵션은 지정하지 않았다.&lt;/li&gt;
&lt;li&gt;기본적인 Unibeast 바이오스 설정(ACPI 등)만 해서 설치를 하니, 인스톨러 화면도 못보고 그냥 리붓되었다. 이 경우 &lt;code&gt;CPU Configuration - No-Execute Memory Protect: Enable&lt;/code&gt;를 설정해서 해결했다.&lt;/li&gt;
&lt;li&gt;부팅 옵션은 &lt;code&gt;PCIRootUID=0&lt;/code&gt; 하나만으로 충분했다.&lt;/li&gt;
&lt;li&gt;무사히 산사자 설치가 완료되면 이제 멀티비스트로 네트워크와 오디오 드라이버를 잡아야 한다. &lt;a href="http://legacy.tonymacx86.com/viewtopic.php?f=81&amp;amp;t=66901&amp;amp;start=0"&gt;이 자료&lt;/a&gt;가 많은 도움이 되었다.&lt;/li&gt;
&lt;li&gt;오디오는 &lt;code&gt;ALC8XXHDA&lt;/code&gt;, &lt;code&gt;AppleHDA Rollback&lt;/code&gt;, &lt;code&gt;Non-DSDT HDA Enabler for ALC892&lt;/code&gt;를 선택할 것.&lt;/li&gt;
&lt;li&gt;네트워크 설정시, 위 글에서는 &lt;code&gt;Lnx2Mac's RealtekRTL81xx Ethernet Driver&lt;/code&gt;를 하라고 했는데, 그냥 &lt;code&gt;Realtek Gigabit Ethernet&lt;/code&gt; 을 지정해도 잘 설정되었다. (사실 최초 부팅시 네트워크는 인식되지만, 멀티비스트를 돌리고 나면 사라지기 때문에 꼭 지정해줘야 한다)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;가끔 다운되는 현상이 있긴 해서 백점 만점을 주진 못하겠지만, 어쨌든 성공이다.&lt;/p&gt;</summary></entry><entry><title>AppScale</title><link href="/2012/05/22/appscale/" rel="alternate"></link><updated>2012-05-22T11:04:00Z</updated><id>tag:None,2012-05-22:/2012/05/22/appscale//</id><summary type="html">&lt;h2&gt;개요&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://appscale.cs.ucsb.edu/"&gt;AppScale&lt;/a&gt;은 구글 앱엔진 플랫폼을 &lt;a href="http://code.google.com/p/appscale/"&gt;오픈 소스&lt;/a&gt;화하는 프로젝트이다. 아래와 같이 구글 앱엔진의 주요 모듈들을 오픈 소스 서비스들로 교체했다고 보면 정답이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;big table =&amp;gt; mysql, MongoDB, Cassandra 등 입맛대로 선택.&lt;/li&gt;
&lt;li&gt;memcache =&amp;gt; memcached&lt;/li&gt;
&lt;li&gt;task queue =&amp;gt; RabbitMQ&lt;/li&gt;
&lt;li&gt;backend =&amp;gt; not supported&lt;/li&gt;
&lt;li&gt;email =&amp;gt; sendmail&lt;/li&gt;
&lt;li&gt;cron =&amp;gt; cron&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다만, 위 서비스들을 리얼 머신들에 직접 분산 설치하는 게 아니라, Ubuntu 가상 머신 이미지에 설치해둔 후 Amazon EC2 같은 가상 머신에 인스턴스들을 설치하고 역할을 지정하는 식으로 설치를 하게 된다. 가상 머신에는 그 외에도 다음과 같은 서비스들이 떠 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ruby&lt;/li&gt;
&lt;li&gt;erlang &amp;amp; neptune =&amp;gt; neptune 이라는 cloud config/delpoy language&lt;/li&gt;
&lt;li&gt;mongrel, mongodb&lt;/li&gt;
&lt;li&gt;ndbd&lt;/li&gt;
&lt;li&gt;nginix master &amp;amp; slave =&amp;gt; 로드밸런싱용 웹서버&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;appscale tools라는 아마존 EC2 tools와 비슷한 루비로된 스크립트로 플랫폼을 관리하게 되며, 아직까지는 python 2.5 만 지원한다. 웹 기반의 간단한 관리툴도 제공한다.&lt;/p&gt;
&lt;h2&gt;구조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;load balancer : http 분산&lt;/li&gt;
&lt;li&gt;application : python&lt;/li&gt;
&lt;li&gt;data management : DB. (cassandra, hbase, hypertable, mongodb, memcachedb, simpledb, mysql cluster, voldmort)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;배포 모델&lt;/h2&gt;
&lt;h3&gt;virtualized cluster deployment&lt;/h3&gt;
&lt;p&gt;관리자가 각 호스트에 이미지를 설치하고 부팅해서 각각 네트워킹이 되는지 체크하고 IP를 기록해서 통신토록.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인스턴스 하나당 1G 메모리, 2 virtual CPU 를 권장&lt;/li&gt;
&lt;li&gt;ssh &amp;amp; root 접근 권한 필요&lt;/li&gt;
&lt;li&gt;그냥 셧다운하면 안됨. appscale 전체를 셧다운한 후에 개별 노드를 셧다운해야 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cloud infrastructure deployment&lt;/h3&gt;
&lt;p&gt;아마존 EC2 에 설치하거나 Eucalyptus(아마존EC2의 오픈소스 버전) 에 배포. AppScale 이 미리 설치된 AMI(Amazon Machine Image)로 설치.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클라우드 관리자는 account credential 필요&lt;/li&gt;
&lt;li&gt;appscale 설치 전에 non-appscale image 가 배포되고 public/private ip 를 설치할 수 있는지 체크해야 함.&lt;/li&gt;
&lt;li&gt;이 테스트가 모두 끝나고 나서 전체 셧다운 후 배포.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;배포&lt;/h2&gt;
&lt;p&gt;appscale tools 를 이용해서 자동화함.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클라우드 관리 인터페이스 제공&lt;/li&gt;
&lt;li&gt;각 인스턴스들의 ssh 키와 credential 들을 동기화함&lt;/li&gt;
&lt;li&gt;ips.yaml 에 각 노드 정보가 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:controller: --&amp;gt; database master &amp;amp; load balancer 가 설치됨&lt;br /&gt;
:servers: --&amp;gt; application servers &amp;amp; database slave 가 설치됨&lt;/p&gt;
&lt;h2&gt;AppScale Tools&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/appscale/wiki/AppScale_Tools_Usage"&gt;사용법&lt;/a&gt; 참조&lt;/p&gt;
&lt;h3&gt;appscale-run-instances&lt;/h3&gt;
&lt;p&gt;특정 폴더를 배포하면서 appscale 서비스를 시작함.&lt;br /&gt;
--file: 배포할 폴더 지정&lt;br /&gt;
--table: 데이터베이스 지정.&lt;/p&gt;
&lt;p&gt;맨 처음에는 controller 노드를 시작함. servers 노드들은 비동기로 시작. 클라우드 배포시 VM 부팅을 시작함. 이미지 크기 때문에 수십분 걸림. 그다음엔 DB를 시작함.&lt;/p&gt;
&lt;h3&gt;appscale-describe-instances&lt;/h3&gt;
&lt;p&gt;각 노드 상태를 보여줌. 메모리. CPU. HDD. 역할. DB.&lt;/p&gt;
&lt;h3&gt;appscale-upload-app, appscale-remove-app&lt;/h3&gt;
&lt;p&gt;특정 앱을 업로드하거나 삭제함.&lt;/p&gt;
&lt;h3&gt;appscale-terminate-instances&lt;/h3&gt;
&lt;p&gt;전체 클라우드를 셧다운함.&lt;/p&gt;
&lt;h2&gt;배포 구성 전략&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;load balancer: 라우팅. 모든 노드들의 상태 페이지 호스팅. 여러 개 실행 가능.&lt;/li&gt;
&lt;li&gt;app engine: 커스터마이즈된 gae sdk 가 실행됨&lt;/li&gt;
&lt;li&gt;database&lt;/li&gt;
&lt;li&gt;login: 딱 한놈만 appscale-run-instances/appscale-upload-app 역할을 담당&lt;/li&gt;
&lt;li&gt;zoo keeper : db transaction 을 위한 메타 데이터 호스팅&lt;/li&gt;
&lt;li&gt;shadow :&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;호환성 &amp;amp; 차이점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://appscale.cs.ucsb.edu/appengine.html"&gt;python 의 경우 backend, oauth 를 제외하고는 다 호환된다고 함&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;blobstore file size &amp;lt; 100M: 우린 안쓰니까 괜찮음.&lt;/li&gt;
&lt;li&gt;query 를 위해서 인덱스를 만드는 대신 in memory filtering 을 한다. 즉 사이즈가 커지면 느려진다 ㅠㅠ 대용량 사용자일 때 개됨.&lt;/li&gt;
&lt;li&gt;task queue 는 실패시 재시작하지 않는다.&lt;/li&gt;
&lt;li&gt;관리자만 메일을 보낼 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/?fromgroups#!topic/Appscale_Community/j_P6nd5NVzs"&gt;DB 는 소프트웨어적으로 에뮬레이션한다고 보면 됨&lt;/a&gt; (mysql mongodb …) 즉 앱엔진에 맞게 튜닝하는 건 힘들다고 봄. (memcached + mysql 조합이 가능한지?)&lt;/li&gt;
&lt;li&gt;최대 100개의 노드&lt;/li&gt;
&lt;li&gt;앱엔진 1.6.2 (python) 지원&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/?fromgroups#!searchin/appscale_community/Copying$20over$20app/appscale_community/816qI9SiDWo/SLYb1A3kBwYJ"&gt;인스턴스간 세션 공유 문제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;벌크로딩은 실패함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;설치하기&lt;/h2&gt;
&lt;p&gt;가상 환경에서 guest OS로 돌아감. 가상 머신 이미지를 배포함. KVM, XEN. 근데 리눅스 Host 만 지원함. 보통 우분투를 씀.&lt;/p&gt;
&lt;p&gt;아마존에서는 이미지 업로드 없이 public AMI 를 써서 바로 띄울 수 있음. 단 버지니아에만 이미지가 존재함.&lt;/p&gt;
&lt;p&gt;see also &lt;a href="http://code.google.com/p/appscale/wiki/Deploying_AppScale_1_3_Beta_via_EC2"&gt;deploying appscale via ec2&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;환경 변수 설정&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws-portal.amazon.com/gp/aws/securityCredentials"&gt;AWS 키 &amp;amp; 크레덴셜&lt;/a&gt; 에서 X.509 키들을 다운받아서 pem 파일을 저장하고 환경 변수로 등록할 것.&lt;/p&gt;
&lt;p&gt;Access Keys 를 카피해서 배치 파일에 등록한다.&lt;/p&gt;
&lt;p&gt;see also &lt;a href="http://code.google.com/p/appscale/wiki/AppScale_IaaS_Cloud_Deployment"&gt;appscale IaaS cloud deployment&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;euca tools 설치&lt;/h3&gt;
&lt;p&gt;아마존 접근을 위해서는 이 툴을 설치해야 된다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.eucalyptus.com/download/euca2ools/source"&gt;euca tools 다운로드&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://sourceforge.net/projects/pcre/files/pcre/8.30/pcre-8.30.tar.gz/download"&gt;pcre&lt;/a&gt; 설치&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://sourceforge.net/projects/swig/files/swig/swig-2.0.6/swig-2.0.6.tar.gz/download"&gt;swig&lt;/a&gt; 설치&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;euca tools src deps 에서&lt;br /&gt;
3-1. boto-1.9b&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;python2.7 에서는 &lt;a href="http://code.google.com/p/boto/issues/detail?id=408"&gt;다음 패치&lt;/a&gt;를 해야 함.&lt;/p&gt;
&lt;p&gt;3-2. M2Crypto-0.20.2&lt;/p&gt;
&lt;h3&gt;appscale tools 설치&lt;/h3&gt;
&lt;p&gt;debian/appscale_build_source.sh 열어서 help2man 관련 섹션 제거 후&lt;br /&gt;
&lt;code&gt;sudo bash debian/appscale_build_source.sh&lt;/code&gt; 를 실행하면 /usr/local/appscale-tools 에 설치됨&lt;/p&gt;
&lt;h3&gt;아마존 서버 설치&lt;/h3&gt;
&lt;p&gt;버지니아에만 있는 appscale 1.6.1rc AMI (ami-e4a3048d) 을 이용해서 1 노드로 설치할 것. 이때 db 는 mysql&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;appscale-run-instances --min 1 --max 1 --file /usr/local/appscale-tools/sample_apps/python/guestbook --machine ami-e4a3048d --table mysql --iaas --force -v&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;인스턴스 타입은 지정하지 않으면 m1.large&lt;/p&gt;
&lt;p&gt;가끔 키가 이미 등록되어 있다고 하는데, 그럴 때에는 --keyname XXX 로 다른 걸 사용할 것.&lt;/p&gt;
&lt;p&gt;관련 키들은 ~/.appscale 폴더에 저장됨. pem 도 들어가 있음.&lt;/p&gt;
&lt;p&gt;ssh 하기&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh -i /Users/reiot/.appscale/warcloud.key root@ec2-23-22-2-204.compute-1.amazonaws.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;팁&lt;/h2&gt;
&lt;h3&gt;access key &amp;amp; secret&lt;/h3&gt;
&lt;p&gt;대칭형 암호화.&lt;br /&gt;
모든 리퀘스트마다 public key id 를 보내고 더불어 secret key의 해시코드를 보내서 서버에서 검증하는 방식. 페북 캔버스앱과 동일한 구조다.&lt;/p&gt;
&lt;h3&gt;X.509 Certificates&lt;/h3&gt;
&lt;p&gt;공개키 암호화. cert.pem 으로 암호화하면 pk.pem 으로 복호화.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;abbr title="Privacy Enhancd Mail"&gt;PEM&lt;/abbr&gt; encoded X.509 certificate: cert-xxxx.pem&lt;/li&gt;
&lt;li&gt;&lt;abbr title="Privacy Enhancd Mail"&gt;PEM&lt;/abbr&gt; encoded RSA private key: pk-xxxx.pem&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;key pairs&lt;/h3&gt;
&lt;p&gt;EC2 인스턴스 접근시 권한.&lt;/p&gt;
&lt;p&gt;ssh 를 위해서 가상 서버 인스턴스에 키를 등록함.&lt;/p&gt;
&lt;h3&gt;ssh 하기&lt;/h3&gt;
&lt;p&gt;-v 옵션으로 상태를 볼 것. -i 로 cert-xxx.pem 파일을 이용. 로그인시 account@server 형식 사용.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh -i ~/.ec2/cert.pem root@ec2-23-22-2-204.compute-1.amazonaws.com -v&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;ec2 commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ec2-authorize default -p NN&lt;/code&gt; : 특정 포트를 기본 오픈. (보통 ssh 22, 웹 80번 포트가 필요함)&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Unity3D Serialization</title><link href="/2012/04/27/unity3d-serialization/" rel="alternate"></link><updated>2012-04-16T16:49:00Z</updated><id>tag:None,2012-04-16:/2012/04/27/unity3d-serialization//</id><summary type="html">&lt;h2&gt;C# 에서의 직렬화&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://msdn.microsoft.com/ko-kr/library/ty01x675(v=vs.80).aspx"&gt;MSDN&lt;/a&gt;에 따르면, 클래스에 &lt;code&gt;[Serializable()]&lt;/code&gt;만 선언하면 자동적으로 직렬화가 되며, ISerializable 을 상속받아서 다음 함수를 재정의해도 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GetObjectData(): serialize 시 호출됨&lt;/li&gt;
&lt;li&gt;protected constructor: deserialize 에서 호출됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Unity3d의 제약 조건&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://unity3d.com/support/documentation/ScriptReference/SerializeField.html"&gt;Unity3d SerializeField&lt;/a&gt; 문서에 따르면,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static 필드, private 필드, property 는 자동 제외.&lt;/li&gt;
&lt;li&gt;각 필드별로 넣으려면 &lt;code&gt;[SerializeField]&lt;/code&gt;, 빼고 싶으면 &lt;code&gt;[NonSerialized]&lt;/code&gt; 선언.&lt;/li&gt;
&lt;li&gt;Dictionary, List of List, Array of Array 의 직렬화는 지원 안함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 하더라도 가끔 iOS에서 지원하지 않는 경우가 있으니, 꼭 디바이스에서 테스트해보기 바란다 :P&lt;/p&gt;
&lt;h2&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://answers.unity3d.com/questions/49286/serialize-a-list-containing-another-list-listlisto.html"&gt;리스트의 리스트 직렬화&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3510763/why-is-my-listt-not-being-serialized"&gt;Dictionary 직렬화 예제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.electrotank.com/forums/archive/index.php/t-12005.html"&gt;JIT 문제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>성공하는 제품을 만들기 위한 팀 구축</title><link href="/2012/04/24/building-a-team-to-ship-a-great-product/" rel="alternate"></link><updated>2012-04-24T21:16:00Z</updated><id>tag:None,2012-04-24:/2012/04/24/building-a-team-to-ship-a-great-product//</id><summary type="html">&lt;p&gt;thanks to 박종천(블리자드)&lt;/p&gt;
&lt;h2&gt;팀의 핵심 요소&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;커뮤니케이션 &amp;lt;== 이게 제일 중요함&lt;/li&gt;
&lt;li&gt;효율&lt;/li&gt;
&lt;li&gt;생산성&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사람을 모아놓고 뭘 하지 고민하지 말라. 좋은 프로젝트를 설정하고, 돈을 모은 후, 적합한 사람을 골라서 배치하는 거다.&lt;/p&gt;
&lt;p&gt;신뢰와 지식&lt;/p&gt;
&lt;p&gt;효율이 떨어지면 커뮤니케이션이 안되고 있는 거다&lt;/p&gt;
&lt;h2&gt;Role&lt;/h2&gt;
&lt;p&gt;누구에게 무엇을 말할 것인가? (무엇을 책임지는가?)&lt;/p&gt;
&lt;p&gt;product owner 는 4-5년을 보고, team lead 는 3-4개월을 보고, 엔지니어는 1-2주 단위를 보는 거다. 롤 마다 뷰가 다르다.&lt;/p&gt;
&lt;h2&gt;낭비(waste)&lt;/h2&gt;
&lt;p&gt;해결책 보다는 원인이 중요하다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;중요하면서 (내가) 실행할 수 있으면 =&amp;gt; 즉시 한다.&lt;/li&gt;
&lt;li&gt;중요한데 (내가) 실행을 못하면 =&amp;gt; 연기&lt;/li&gt;
&lt;li&gt;중요하진 않지만 실행할 수 있으면 =&amp;gt; 위임&lt;/li&gt;
&lt;li&gt;중요하지도, 할 수도 없으면 =&amp;gt; 무시(잊자)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이건 zen to done 과 비슷하구나. 핵심은 해결못하면 고민하지도 마라는 점.&lt;/p&gt;
&lt;h2&gt;우선순위&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;중요하고 급하면 =&amp;gt; 너무 명백하니까 오히려 쉽다. 누구나 다 안다.&lt;/li&gt;
&lt;li&gt;중요한데 안급하다 =&amp;gt; 계획을 세운다. 이게 바로 리더가 해야 할 일이다.&lt;/li&gt;
&lt;li&gt;안중요한데 급하다 =&amp;gt; 귀찮네..&lt;/li&gt;
&lt;li&gt;안중요하고 급하지도 않다 =&amp;gt; 아주 사소한 일이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;판단하기(judgement)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;필요한가(need)/원하는가(want)&lt;/li&gt;
&lt;li&gt;아는가/모르는가&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 조합으로 나오는 건&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;need+known : new feature&lt;/li&gt;
&lt;li&gt;need+unknown : 계획을 세워야 한다. 이게 제일 중요함&lt;/li&gt;
&lt;li&gt;want+known : change ui&lt;/li&gt;
&lt;li&gt;want+unkonwn: 리팩토링&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;모르지만 중요한 것부터 도전해야 한다. 나머지는 다 견적 나온다.&lt;/p&gt;
&lt;p&gt;known-want 부터 하면 실패한다.&lt;/p&gt;
&lt;h2&gt;direction&lt;/h2&gt;
&lt;p&gt;팀 간에 충돌은 당연. 오히려 충돌이 없는게 무서운 상황. 뭔가 잘 되어가고 있으면 의심하라. 배가 산으로 가는건 금방이다. &lt;/p&gt;
&lt;p&gt;속도 보다는 디렉션이 훨씬 중요하다. 잠시 멈춰도 정확하게 자주 해야 된다. &lt;/p&gt;
&lt;p&gt;속도가 빠를 수록 주의해야 한다. 속도는 일정해야 한다. 과속 택시 보다는 지하철이 좋은 거다. (예측하기 쉬우므로)&lt;/p&gt;
&lt;h2&gt;기타&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;title : 직급. 성장하는 거다. associate &amp;lt; junier &amp;lt; senior &amp;lt; lead programmer …  &amp;lt; cto&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;position : 현재의 롤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;블리자드 HR 팀의 핵심 명제: Attract &amp;lt; Develop &amp;lt; Engage : 꼬셔서 잘 발전시켜서 잘 적응시킨다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;performance review&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;생산성, 전문성, 팀웍, 지식, 역할, 구현&lt;/li&gt;
&lt;li&gt;각각의 항목을 측정해서 발전시킨다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;vision &amp;amp; goal&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;비전은 장기적, 목표은 단기적&lt;/li&gt;
&lt;li&gt;회사, 팀, 개인의 비전과 목표가 일치하는게 좋다.&lt;/li&gt;
&lt;li&gt;회사의 core values == 문화를 핵심 문장으로 표현하기&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3 가지 룰&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;행복할 것&lt;/li&gt;
&lt;li&gt;목표를 잘 이룰 것&lt;/li&gt;
&lt;li&gt;매일 매일 배울 것&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Node.js로 25만 동접 만들기</title><link href="/2012/04/21/250k-node-connections/" rel="alternate"></link><updated>2012-04-12T10:52:00Z</updated><id>tag:None,2012-04-12:/2012/04/21/250k-node-connections//</id><summary type="html">&lt;p&gt;via &lt;a href="http://blog.caustik.com/"&gt;caustik's blog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href="http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/"&gt;node.js 를 10만 동접으로 스케일링하기&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;10만 동접을 처리하는데 CPU 점유율 40%, (virtual) 메모리 1.4G 를 차지함. 이 정도면 rackspace 2G 클라우드 서버일 경우 시간당 0.1$ 로 가능함.&lt;/li&gt;
&lt;li&gt;각 연결은 5초에 한번 메시지를 보냄. 대략 초당 4만개의 JSON 패킷이 보내짐. 응답성도 좋음. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 성능을 위한 설정은:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nagle 알고리즘을 사용안함: 빠른 응답성을 위해 커널 내부에 네트워크 버퍼링을 사용하지 않고 즉시 보내지도록 함. socket.setNoDelay().&lt;/li&gt;
&lt;li&gt;v8의 idle 가비지 컬렉션을 끄기 위해 --nouse-idle-notification 옵션 사용: JS 객체가 2백만개 정도 되면 몇 초마다 가비지 컬렉션 때문에 1초 가까이 랙이 걸림. 실제로 객체들을 순회하는 데만 이 정도의 시간이 소모됨. &lt;br /&gt;
[역주] 소스 코드를 보면 --expose_gc 옵션으로 실행해서 gc()를 실행할 수 있게 한 다음, /debug/gc 메시지를 보내서 가비지 컬렉션을 하게 되는데, 이걸 실행하는 순간 랙은 뭘 해도 피할 수 없음. ㅠㅠ &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="http://blog.caustik.com/2012/04/10/node-js-w250k-concurrent-connections/"&gt;node.js 로 25만 동접 만들기&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;가장 최근 태그된 v8 리비전의 성능이 그나마 낫다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;25만 연결은 v8의 1.4기가 힙 메모리 제한 하에서의 최대치. 이 상황에서도 CPU 사용량이나 메모리 사용량이 낮은 걸 본다면, 충분히 더 나아질 수 있을 듯.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 번 테스트해본 결과, SVN의 가장 최근에 태그된 리비전이 그나마 제일 안정적이었음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클러스터 모듈의 워커들을 이용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;100개의 아마존 EC2 서버들로부터 초당 10만개의 JSON HTTP GET 요청을 보냄. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;클러스터 모듈을 사용해서 일시적인 요청(?) 처리의 오버헤드를 줄임. (35만 연결 중 10만개 정도가 일시적이었다) [역주] 자식 프로세스로 어떻게 뭘 분산하는지는 현재 미확인 &lt;/li&gt;
&lt;li&gt;마스터는 이전과 동일. 워커는 CPU 당 하나씩 생성하고, 마스터와는 다른 포트를 사용해서 요청을 받아서 마스터로 포워딩함. 이렇게 한 이유는 오직 1.4기가 힙 제한 때문.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a href="http://blog.caustik.com/2012/04/11/escape-the-1-4gb-v8-heap-limit-in-node-js/"&gt;V8의 1.4GB 힙제한 벗어나기&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ulimit -n 999999&lt;/code&gt;: 소켓 오픈 개수 제한을 증가. 기본 1024.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--nouse-idle-notification&lt;/code&gt;: 가바지 컬렉터가 자동적으로 실행되는 걸 막음. 30초마다 4초짜리 랙이 걸리고 싶지 않으면 사용해야 함. --expose-gc 로 gc() 함수를 자바스크립트에서 직접 호출. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;--max-old-space-size=8192&lt;/code&gt; : 메모리 제한 최대값을 임의로 설정. &lt;/li&gt;
&lt;li&gt;최신 v8 소스를 약간 고쳐서 빌드: 메모리 관련 설정이나 가비지 컬렉터 실행 부분을 수정. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;최근엔 1.4G 제한을 넘어서 2.2G 까지도 사용할 수 있었음. :)&lt;/p&gt;
&lt;p&gt;[역주] node.js 서버 실행시 넘기는 파라미터:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;node --trace-gc --expose-gc --nouse-idle-notification --max-new-space-size=2048 --max-old-space-size=8192 sprites.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;총평&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;게임 서버를 개발시 이슈가 되는, 응답성, 동접 처리 등의 문제를 node.js 개발자들도 만나기 시작함. 의외로 메모리 제한이 문제가 된다는 게 특이했음. node.js 개발진은 메모리 제약은 클러스터 모듈로 분산해서 해결하는 걸 추천하는 듯. &lt;/li&gt;
&lt;li&gt;가비지 컬렉팅 문제는 응답성이 중요한 액션 게임을 개발할 경우 심각할 수 있음. (4초나 랙이 걸린다니! 그것도 30초마다!) 그래도 소셜 게임 수준은 걱정하지 않아도 될 듯. &lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Python Iterator vs. Generator</title><link href="/2012/04/16/python-generator/" rel="alternate"></link><updated>2012-04-16T16:49:00Z</updated><id>tag:None,2012-04-16:/2012/04/16/python-generator//</id><summary type="html">&lt;h2&gt;iterator&lt;/h2&gt;
&lt;p&gt;임의의 sequence 를 순회하는데 필요한 정보를 담은 오브젝트.&lt;br /&gt;
iter() 함수를 통해서 생성하고, next() 함수를 이용해서 index 를 증가시켜서 다음 객체를 리턴한다. 맨 끝에 도달하면 StopIteration 예외를 던진다.&lt;/p&gt;
&lt;p&gt;즉 for x in seq 는 내부적으로 아래와 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;it = iter(seq)
while 1:
  try:
    x = it.next()
  except StopIteration:
    break
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;임의의 클래스에 &lt;strong&gt;iter&lt;/strong&gt;() 과 next() 함수를 정의하면, in 연산자로 iteration 이 가능하다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class MyCollection:
  def __init__(self, seq): self.idx=0; self.seq=seq
  def __iter__(self): return self
  def next(self):
    if self.idx &amp;gt; len(self.seq): raise StopIteration
    self.idx += 1
    return self.seq[self.idx]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;generator function&lt;/h2&gt;
&lt;p&gt;iterator 가 next() 호출을 통해서 값을 "리턴"하는 것과 달리, generator 는 next() 함수를 부르면 이전에 멈춘 곳부터 실행(resume)하다가 yield로 값을 리턴하고 다시 멈춤(pause)으로써, 결과적으로 값을 순차적으로 "생성"한다. 맨 끝에서는 역시 StopIteration 예외를 던진다.&lt;/p&gt;
&lt;h2&gt;generator expression&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;(x for x in seq)&lt;/code&gt; 처럼 [] 대신 () 로 list comprehension 을 묶으면 generator 를 간단히 만들 수 있다.&lt;/p&gt;
&lt;p&gt;리스트를 파라미터로 받는 함수에 그대로 넘길 수도 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sum(x for x in seq)&lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>AppEngine pipeline</title><link href="/2012/04/04/appengine-pipeline/" rel="alternate"></link><updated>2012-04-04T18:12:00Z</updated><id>tag:None,2012-04-04:/2012/04/04/appengine-pipeline//</id><summary type="html">&lt;h3&gt;개요&lt;/h3&gt;
&lt;p&gt;Datastore 에 task 순서를 저장하고 순차적으로 하나씩 실행한다. &lt;br /&gt;
task 1 의 리턴값이 task2 의 출력값이 된다.&lt;br /&gt;
내부적으로 task queue 를 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run() 의 리턴값 또는 마지막 yield 값이 self.outputs.default.value 가 된다.&lt;/li&gt;
&lt;li&gt;여러 개의 값을 리턴할 수도 있다.&lt;/li&gt;
&lt;li&gt;값에 이름이 필요할 경우 output_names 와 fill() 함수를 이용할 것.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;output = [ slot, ... ] 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;2개를 순차 실행&lt;/h3&gt;
&lt;p&gt;task2 에서 task1 을 yield 로 호출할 것.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Task1(pipeline.Pipeline):
  def run(self, input):
    return input*2

class Task2(pipeline.Pipeline):
  def run(self, input):
    result = yield Task1(input)
    return input+1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이때 x 는 Future 객체다. x 의 값을 읽어오려면 또다른 yield 로만 가능하다. &lt;/p&gt;
&lt;h3&gt;common 모듈&lt;/h3&gt;
&lt;p&gt;각종 다양한 파이프라인 기능을 지원한다.&lt;/p&gt;
&lt;h3&gt;callback(), get_callback_task(), get_callback_url()&lt;/h3&gt;
&lt;p&gt;어떤 태스크들은 사람이 중간에 개입해서 이메일의 링크를 클릭하거나, delay 처럼 일정 시간 후에 태스크큐를 통해서 비동기적으로 수행될 필요가 있다. &lt;/p&gt;
&lt;p&gt;이때 콜백 함수가 호출된다. &lt;/p&gt;
&lt;h3&gt;finalize()&lt;/h3&gt;
&lt;p&gt;아직 결과값이 저장되지는 않은 상태다. &lt;/p&gt;
&lt;h3&gt;output_names &amp;amp; fill()&lt;/h3&gt;
&lt;p&gt;하나의 값이 아니라 여러 개의 값을 이름 기반으로 넘겨야 할 때&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output_names = ['aa', 'bb']
…
self.fill(self.outputs.aa, 11)
self.fill(self.outputs.bb, 'bbbbb')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;와 같은 방식으로 저장한다.&lt;/p&gt;
&lt;h3&gt;with pipeline.After()&lt;/h3&gt;
&lt;p&gt;futures 를 파라미터로 받아서 해당 태스크가 모두 끝난 경우 with 아래 문을 실행한다.&lt;/p&gt;
&lt;h3&gt;common.Append()&lt;/h3&gt;
&lt;p&gt;여러 개의 태스크를 실행한 후 하나의 리스트로 리턴한다.&lt;/p&gt;
&lt;h3&gt;raise pipeline.Retry, Abort&lt;/h3&gt;
&lt;p&gt;예외는 위와 같이 넘길 것&lt;/p&gt;
&lt;h3&gt;yield common.Log.info()&lt;/h3&gt;
&lt;p&gt;비동기 로그 남기기&lt;/p&gt;</summary></entry><entry><title>NoSQL 조사</title><link href="/2012/04/02/nosql-research/" rel="alternate"></link><updated>2012-04-02T18:28:00Z</updated><id>tag:None,2012-04-02:/2012/04/02/nosql-research//</id><summary type="html">&lt;p&gt;&lt;a href="http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis"&gt;NoSQL DB 비교&lt;/a&gt;라는 문서를 기준으로 각 데이터베이스의 특성을 간략 조사해봤다.&lt;/p&gt;
&lt;h3&gt;mongodb&lt;/h3&gt;
&lt;p&gt;10gen 이라는 회사에서 운영. 오픈 소스. 컬럼 그룹 기반.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ based&lt;/li&gt;
&lt;li&gt;SQL과의 호환성(쿼리, 인덱스)&lt;/li&gt;
&lt;li&gt;protocol: BSON &amp;amp; custom&lt;/li&gt;
&lt;li&gt;storage: memory mapped file&lt;/li&gt;
&lt;li&gt;sharding&lt;/li&gt;
&lt;li&gt;query: javascript expression&lt;/li&gt;
&lt;li&gt;server script: javascript&lt;/li&gt;
&lt;li&gt;다이나믹 쿼리가 필요한 경우&lt;/li&gt;
&lt;li&gt;map/reduce 보다 index 가 많은 경우&lt;/li&gt;
&lt;li&gt;데이터가 많을 때 성능이 중요한 경우&lt;/li&gt;
&lt;li&gt;couch db 에 비해서 데이터가 자주 변하는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Riak&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Erlang &amp;amp; C (+ JS) based&lt;/li&gt;
&lt;li&gt;fault tolerance 가 최우선&lt;/li&gt;
&lt;li&gt;Protocol: HTTP/REST&lt;/li&gt;
&lt;li&gt;map/reduce: by JS &amp;amp; Erlang&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CouchDB&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Erlang based&lt;/li&gt;
&lt;li&gt;DB 안정성이 최우선. 손쉬운 사용.&lt;/li&gt;
&lt;li&gt;Protocol: HTTP/REST&lt;/li&gt;
&lt;li&gt;자주 바뀌지 않는 데이터&lt;/li&gt;
&lt;li&gt;데이터 버전관리가 중요한 경우&lt;/li&gt;
&lt;li&gt;ex&amp;gt; CMS, CRM&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://redis.io/"&gt;Redis&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;key-value store. github, disqus, digg, stackoverflow 에서 사용중이다.&lt;/p&gt;
&lt;h4&gt;특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;C/C++ based&lt;/li&gt;
&lt;li&gt;속도가 최우선&lt;/li&gt;
&lt;li&gt;Protocol: telnet like?&lt;/li&gt;
&lt;li&gt;disk backed in memory db ??&lt;/li&gt;
&lt;li&gt;disk swap 지원 안함&lt;/li&gt;
&lt;li&gt;set, list, hash, sorted set 등 다양한 타입 지원&lt;/li&gt;
&lt;li&gt;트랜잭션도 있다..&lt;/li&gt;
&lt;li&gt;데이터 용량 == 메모리에 올라 갈 정도의 크기여야 한다&lt;/li&gt;
&lt;li&gt;자주 데이터가 바뀌지만 크기는 예측 가능한 분야에 적절&lt;/li&gt;
&lt;li&gt;ex&amp;gt; 주가, 분석, 실시간 데이터, 실시간 통신..&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터 안정성&lt;/h4&gt;
&lt;p&gt;via &lt;a href="http://redis.io/topics/persistence#snapshotting"&gt;스냅샷&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;저장 방식&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;RDB(snapshot): 큰 파일 하나에 DB 전체를 저장.&lt;/li&gt;
&lt;li&gt;AOF(Append Only File): 변경 사항(command)을 로그 파일에 계속 추가함. 서버가 뜰 때 이걸 쭈욱 읽어서 원본 데이터를 만들어낸다.&lt;/li&gt;
&lt;li&gt;둘 다 끄면 캐시 모드가 됨. 서버 끄면 사라짐.&lt;/li&gt;
&lt;li&gt;둘 다 적용하면, 마지막 rdb 다음부터의 AOF 를 읽어서 만들어냄&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;RDB 의 장점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;특정 시각의 데이터를 하나의 파일에 담았다&lt;/li&gt;
&lt;li&gt;백업/복구에 용이: 주기적으로 RDB를 만들어서 외부에 백업하기 쉽다&lt;/li&gt;
&lt;li&gt;성능면에서 최고&lt;/li&gt;
&lt;li&gt;빠른 재시작&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;RDB 단점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;데이터 손실 가능성: 파워 나감&lt;/li&gt;
&lt;li&gt;주기적으로 여러 RDB를 만들어야 된다.&lt;/li&gt;
&lt;li&gt;저장할 때마다 fork 한다. 이때 I/O 가 멈추거나 CPU가 스파이크 친다.&lt;/li&gt;
&lt;li&gt;물론 AOF 도 fork 를 하긴 한다.. 대신 조정이 가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;AOF 장점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;보다 안정적. fsync 정책을 튜닝 가능(매 초마다, 모든 쿼리 마다)&lt;/li&gt;
&lt;li&gt;기본 정책은 1초마다. 백그라운드 쓰레드가 실행함.&lt;/li&gt;
&lt;li&gt;append only 라서 데이터 커럽션이 없다. 마지막 데이터가 깨질 경우에도 쉽게 고칠 수 있다.&lt;/li&gt;
&lt;li&gt;로그가 너무 커지면 자동적으로 다른 파일로 분할한다.&lt;/li&gt;
&lt;li&gt;로그 포맷이 이해하기 쉽다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;AOF 단점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;RDB 보다 파일 용량이 크다&lt;/li&gt;
&lt;li&gt;RDB 보다 느리다&lt;/li&gt;
&lt;li&gt;데이터가 꼬일 확률이 존재한다. 과거에 그런 버그가 있었다. 근데 아직 버그 리포트는 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;결론&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;둘 다 사용해야 함&lt;/li&gt;
&lt;li&gt;스냅샷: dump.rdb 를 남김.&lt;/li&gt;
&lt;li&gt;초 단위 주기. 또는 데이터셋의 변화량 단위.&lt;br /&gt;
 ex&amp;gt; save 60 1000 === 60초 마다, 1000 개의 변화 마다&lt;/li&gt;
&lt;li&gt;fork 해서 자식 프로세스가 dump.rdb 를 저장하면 기존 파일을 변경&lt;/li&gt;
&lt;li&gt;AOS:&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cassandra&lt;/h3&gt;
&lt;p&gt;페이스북이 개발해서 오픈소스화. 지금은 아파치에서 관리중. 페이스북/트위터/Digg 에서 사용. 컬럼 그룹 형태의 데이터 모델. 데이터 일관성 잘 지원한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자바 기반&lt;/li&gt;
&lt;li&gt;읽기 보다는 쓰기를 많이 할 때&lt;/li&gt;
&lt;li&gt;모든 컴포넌트가 다 자바일때&lt;/li&gt;
&lt;li&gt;은행, 금융.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;couchbase(membase)&lt;/h3&gt;
&lt;p&gt;via &lt;a href="http://www.couchbase.com/couchbase-server/features"&gt;Features&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;membase 가 couchbase 로 통합됨&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Erlang &amp;amp; C 기반&lt;/li&gt;
&lt;li&gt;memcache 호환성 + 영속성 + 클러스터링 이 중요&lt;/li&gt;
&lt;li&gt;존나 빠름&lt;/li&gt;
&lt;li&gt;디스크 영속성&lt;/li&gt;
&lt;li&gt;web GUI&lt;/li&gt;
&lt;li&gt;DB를 끄지 않고 업그레이드 가능&lt;/li&gt;
&lt;li&gt;데이터 접근 속도가 중요할 때, 많은 접근이 있을 경우, 높은 가용성 필요할 때&lt;/li&gt;
&lt;li&gt;징가 같은 highly concurrent web app&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;HBase&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;google big table 의 오픈 소스 클론&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;총평&lt;/h2&gt;
&lt;h3&gt;유력한 후보들&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mongodb: 팔방미인. blob&lt;/li&gt;
&lt;li&gt;redis: 로그 &amp;amp; 캐시&lt;/li&gt;
&lt;li&gt;couchbase(membase): 메모리 기반 but 용량 한계. 근데 node.js 클라 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;무시할 놈들&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;couchdb: 데이터가 자주 바뀐다…&lt;/li&gt;
&lt;li&gt;cassandra: 자바 기반&lt;/li&gt;
&lt;li&gt;riak: 머임..&lt;/li&gt;
&lt;li&gt;hbase: 즐..&lt;/li&gt;
&lt;/ul&gt;</summary></entry></feed>