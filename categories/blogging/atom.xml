<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blogging | Social Reiot]]></title>
  <link href="http://reiot.com/categories/blogging/atom.xml" rel="self"/>
  <link href="http://reiot.com/"/>
  <updated>2012-01-22T10:06:24+09:00</updated>
  <id>http://reiot.com/</id>
  <author>
    <name><![CDATA[Ray Yun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wordpress To Octopress]]></title>
    <link href="http://reiot.com/2011/09/21/wordpress-to-octopress/"/>
    <updated>2011-09-21T00:15:00+09:00</updated>
    <id>http://reiot.com/2011/09/21/wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://octopress.org/images/logo.png" title="해커 전용 블로깅 프레임워크?" ></p>

<p><a href="http://octopress.org">Octopress</a>는 정적 사이트 생성기인 <a href="http://jekyllrb.com/">Jekyll</a> 을 이용해서 블로그를 손쉽게 구성하도록 해주는 루비 프레임워크다. 말 그대로 정적 HTML 파일들을 미리 만들어서 어딘가로 올려서 서비스하는 거라, GitHub에서 블로그를 서비스할 수 있음은 물론, Amason S3나 구글 앱엔진에서도 블로그 서비스가 가능하다.</p>

<p>큼직큼직한 글씨와 미려한 테마, 코드 문법 하일라이팅, blockquote, gist 코드 포함 등의 다양한 플러그인이 지원되며, 생성, 배포, 최신 소스 업데이트, 글쓰기 등의 작업들이 rake 콘솔 명령으로 간편하게 포장(?)되어 있다. DB를 쓰지 않기 때문에 코멘트는 Disqus 같은 외부 사이트를 이용하게 된다. 워낙 매뉴얼이 잘 되어 있어서 설치나 사용법은 그냥 따라해도 충분하다. 레이옷은 DropBox에 origin 레파지토리를 두고 사용중이다.</p>

<p>중요한 건 기존 블로그를 얼마나 손쉽게 이전하느냐인데, 워드프레스.com에서 이사오는 데 거의 3일이 걸렸다. 워낙 블로그 이사를 많이 다녀서 메타 정보가 개판이었고 본문에 이런 저런 비표준 태그를 많이 써서 문제는 더욱 심각했다. 또 워드프레스에서 내보내기로 받아온 XML 자체에도 문제가 많았다. (내 경우에는 글들이 중간에 짤려서 태그가 제대로 완결이 안되었다든지, ^Z가 본문 중에 있어서 파싱이 안되기도 했다.) Jekyll에서 제공하는 스크립트는 마크다운 변환 기능이 빠져 있고, 유니코드 에러를 자주 뱉기 때문에 직접 파이썬으로 만들어야만 했다. (루비 책 몇 권 사놓고도 문법을 보니 머리가 아파서 포기했다.)</p>

<p>어쨌든 그 삽질의 결과물을 아래와 같이 공개한다. 자유롭게 이용하되, 아래 스크립트의 사용시 책임은 사용자 본인에게 있다는 걸 미리 밝힌다. :P</p>

<p><div><script src='https://gist.github.com/1239373.js?file='></script>
<noscript><pre><code># -*- coding: utf-8 -*-
#!/usr/bin/env python
import sys
import os
import re
import yaml
import urllib
import codecs
from datetime import datetime
from BeautifulSoup import BeautifulStoneSoup, Comment

# save markdown to single LOGFILE
DEBUG = False
XML = &quot;wordpress.2011-09-19.xml&quot;
EXPORT_ROOT = 'source/'
MARKDOWN_FORMAT = '%04d-%02d-%02d-%s.markdown'
LOGFILE = &quot;log.markdown&quot;
EXCLUDE_METAS = [
    u'_edit_last',
    u'superawesome',
    u'delicious',
    u'_wp_page_template',
]
EXCLUDE_CATEGORIES = [
    u'Uncategorized',
]
EXCLUDE_TAGS = []

def to_markdown(txt):
    matches = [
    	[r'&lt;/?strong&gt;', '**'],
    	[r'&lt;/?em&gt;', '*'],
    	[r'&lt;h1&gt;', '# '],
    	[r'&lt;h2&gt;', '## '],
    	[r'&lt;h3&gt;', '### '],
    	[r'&lt;h4&gt;', '#### '],
    	[r'&lt;h5&gt;', '##### '],
    	[r'&lt;h6&gt;', '###### '],
    	[r'&lt;/h\d&gt;', '\n'],
    	[r'&lt;/?p[^&gt;]*&gt;', '\n'], # &lt;p class=blahblah&gt;..&lt;/p&gt;
    	[r'&lt;/?span[^&gt;]*&gt;',''], # &lt;span class=blahblah&gt;..&lt;/span&gt;
    	[r'&lt;br\s*/?&gt;', '  '],
    	[r' {3,}', '  '],
    	[r'&lt;a.+?href=&quot;([^&quot;]+)&quot;[^&gt;]*&gt;([^&lt;]+)&lt;/a&gt;', r'[\2](\1)'],
    	[r'&lt;li&gt;', '- '],
    	[r'&lt;/li&gt;', ''],
    	[r'&lt;/?ul&gt;', ''],
    	[r'&lt;/?ol&gt;', ''],
    	[r'\n{3}', '\n\n'],
    	[r'&amp;amp;', '&amp;'],
    	[r'&amp;lt;', '&lt;'],
    	[r'&amp;gt;', '&gt;'],
    	[r'&amp;nbsp;', ' '],
    	[r'&amp;quot;', '&quot;'],
    	[r'&amp;#\d+;',''], # &amp;#NNNN; some html entities

    	# remove custom tags found in xml
    	[r'&lt;div class=&quot;blogger-post-footer&quot;&gt;.+&lt;/div&gt;',''],

        # liquid tag conflict. but {{}} is manually fixed :P
        [r'{%(.+?)%}', r'{{ &quot;{% \1 &quot;}} %}'],    	

        # octopress plugin
    	[r'&lt;img(.+?)src=&quot;([^&quot;]+)&quot;\s+alt=&quot;([^&quot;]+)&quot;[^&gt;]*/&gt;', r'{% img \2 \3 %}'],
    	[r'&lt;img(.+?)src=&quot;([^&quot;]+)&quot;[^&gt;]*/&gt;', r'{% img \2 %}'],
    	[r'\[sourcecode language=[&quot;\']([^&quot;\']+)[&quot;\']\]', r'{% codeblock lang:\1 %}'],
    	[r'\[/sourcecode\]', r'{% endcodeblock %}'],
    	[r'\[cpp\]', r'{% codeblock lang:cpp %}'],
    	[r'\[/cpp\]', r'{% endcodeblock %}'],
    	[r'\[python\]', r'{% codeblock lang:python %}'],
    	[r'\[/python\]', r'{% endcodeblock %}'],
    	[r'\[code\]', r'```\n'],
    	[r'\[/code\]', r'```'],
        [r'&lt;pre&gt;&lt;code&gt;', r'```\n'],
        [r'&lt;/code&gt;&lt;/pre&gt;', r'```'],
    	[r'&lt;pre&gt;', r'```\n'],
    	[r'&lt;/?pre&gt;', r'```'],
    	#[r'&lt;/?code&gt;', r'```'],
        [r'&lt;blockquote&gt;', r'{% blockquote %}'],
        [r'&lt;/blockquote&gt;', r'{% endblockquote %}'],
    ]

    for match in matches:
        txt = re.sub(match[0], match[1], txt)

    return txt
    
def slugify(title):
    # this may break permlink.... please checkout removal of some chars.
    title = title.strip().lower()
    matches = [
    	[r&quot;[,.]&quot;, ''],
    	[r&quot; &quot;, '-'],
    ]
    for match in matches:
        title = re.sub(match[0], match[1], title)
    
    return title

def parse_item(item):
    # pub_date = item.find(&quot;pubDate&quot;) # some old posts have missing year. ex&gt; Wed, 30 Nov -0001 00:00:00 +0000 
    # creator = item.find(&quot;dc:creator&quot;) # always me
    # guid = item.find(&quot;guid&quot;) # original imported URL. can be None. isPermaLink alwase false
    # description = item.find(&quot;description&quot;) # i never use this :P
    # excerpt = item.find(&quot;excerpt:encoded&quot;) # i never use this :P
    # wp_post_id = item.find(&quot;wp:post_id&quot;) # integer
    # wp_post_date_gmt = item.find(&quot;wp:post_date_gmt&quot;) # sometimes 0000-00-00 00:00:00
    # wp_ping_status = item.find(&quot;wp:ping_status&quot;) # open, closed
    # wp_post_parent = item.find(&quot;wp:post_parent&quot;) # wp:post_id
    # wp_menu_order = item.find(&quot;wp:menu_order&quot;) # integer?
    # wp_is_stiky = item.find(&quot;wp:is_sticky&quot;) # 0 or 1 ?
    
    def _(node):
        if not node or not node.string:
            return u''            
        u = unicode(node.string)
        if u.startswith(u'&lt;![CDATA['):
            u = u[9:-3]
        return u
    
    # ex&gt; post, page, attachment, custom_dns(for dns service)
    wp_post_type = _(item.find(&quot;wp:post_type&quot;)) 
    if wp_post_type not in (u'post', u'page'):
        return
    
    # ex&gt; draft, auto-draft, private, publish, attachment, inherit(for attachment)
    wp_status = _(item.find(&quot;wp:status&quot;)) 
    if wp_status == u'attachment':
        return

    title = _(item.find(&quot;title&quot;))
    title = title.replace(&quot;\\&quot;,&quot;&quot;) # backslash raise error on yaml string

    wp_post_date = _(item.find(&quot;wp:post_date&quot;)) 
    post_date = datetime.strptime(wp_post_date,&quot;%Y-%m-%d %H:%M:%S&quot;)

    # slug can be null or quoted already (if cjk title)
    slug = _(item.find(&quot;wp:post_name&quot;))
    if not slug:
        slug = slugify(title)
    else:
        slug = urllib.unquote(slug.encode('utf-8')).decode('utf-8')
        
    assert isinstance(slug, unicode), 'slug should be unicode'
        
    filename = u'%04d-%02d-%02d-%s.markdown'%(post_date.year, post_date.month, post_date.day, slug)

    if DEBUG:
        out = codecs.open( LOGFILE, &quot;a&quot;, &quot;utf-8&quot;)
        out.write(u'\n_%ss/%s\n'% (wp_post_type, filename))
    else:
        path = os.path.join(u&quot;source&quot;, u&quot;_%ss&quot;% wp_post_type)
        if not os.access( path, os.F_OK ):
            os.mkdir( path )
        try:
            out = codecs.open( os.path.join(path, filename), &quot;w&quot;, &quot;utf-8&quot;)
        except UnicodeDecodeError, e:
            print 'UnicodeDecodeError:', str(e), 'in', post_date, _(item.find(&quot;title&quot;))
            print 'slug', type(slug), 'filename', type(filename), 'path', type(path)
            return

    # starting yaml header
    out.write(u'---\n')
    
    # post or page layout template
    out.write(u'layout: %s\n'% wp_post_type)

    # sometimes title contains html entities like &amp;amp; &amp;lt; &amp;gt; ...
    out.write(u'title: &quot;%s&quot;\n'% title)

    # NOTE bulk-imported posts have same datetime!
    out.write(u'date: %s\n'% post_date)

    # perm link? normally contains original link.
    link = _(item.find(&quot;link&quot;))
    out.write(u'link: %s\n'% link)

    tags = []
    for tag in item.findAll(&quot;category&quot;,{&quot;domain&quot;:&quot;tag&quot;}):
        tags.append(_(tag))
    tags = list(set([t for t in tags if t not in EXCLUDE_TAGS]))
    if tags:
        out.write(u'tags:\n')
        for tag in tags:
            out.write(u'- %s\n'% tag)

    categories = []
    for category in item.findAll(&quot;category&quot;,{&quot;domain&quot;:&quot;category&quot;}):
        categories.append(_(category))
    categories = list(set([c for c in categories if c not in EXCLUDE_CATEGORIES]))
    if categories:
        out.write(u'categories:\n')
        for category in categories:
            out.write(u'- %s\n'% category)

    # some metas are useless...
    metas = {}
    for meta in item.findAll(&quot;wp:post_meta&quot;):
        meta_key = _(meta.find(&quot;wp:meta_key&quot;))
        meta_value = _(meta.find(&quot;wp:meta_value&quot;))
        if meta_key not in EXCLUDE_METAS:
            metas[meta_key] = meta_key
    if metas:
        out.write(u'meta:\n')
        for k, v in metas:
            out.write(u'  %s: %s\n'% (k, v))

    #out.write(u'status: %s\n'% wp_status)

    # octopress will skip unpublished posts.
    out.write(u'published: %s\n'% ('true' if wp_status == u'publish' else 'false'))

    # octopress will not show comment input??
    # ex&gt; open, closed
    wp_comment_status = _(item.find(&quot;wp:comment_status&quot;)) 
    out.write(u'comments: %s\n'% ('true' if wp_comment_status == u'open' else 'false'))
    
    # end of yaml header
    out.write(u'---\n')

    content = _(item.find(&quot;content:encoded&quot;))
    content = to_markdown(content.strip())
    out.write(content)

    out.close()    
        
if __name__ == '__main__':

    if DEBUG:
        if os.access(LOGFILE, os.F_OK ):
            os.remove(LOGFILE)
        
    # if len(sys.argv) &gt; 1:
    #     XML = sys.argv[1]
        
    print 'loading...'
    soup = BeautifulStoneSoup(open(XML))
    print 'parsing...'
    for item in soup.findAll(&quot;item&quot;):
        parse_item(item)
    print 'done'
        </code></pre></noscript></div>
</p>

<p>참고로, 변환을 하다 보면 다양한 에러들을 만나게 된다. -_-+</p>

<ul>
<li>invalid byte sequence in UTF-8 : 이건 본문 중에 애매한 문자열이 있다는 건데, 강제로 유니코드로 변환했음에도 발생한다. 알아서 찾아서 고치는 수 밖에 없다. 단 octopress 소스를 아래와 같이 고쳐야 한다.
```ruby octopress/plugins/post_filters.rb
  def do_layout(payload, layouts)

<pre><code>pre_render if respond_to?(:pre_render)
begin
  old_do_layout(payload, layouts)
rescue StandardError =&gt; e
    puts "Post Filter Error: " + e.message + self.url
end
</code></pre>

<p>  end
```</p></li>
<li>Liquid Exception: 혹시 django 나 jquery template 코드가 있을 경우, 이게 Jekyll 의 템플릿 엔진인 <a href="http://liquidmarkup.org/">liquid</a>의 태그와 동일하기 때문에 에러가 발생한다. <a href="http://stackoverflow.com/questions/3426182/how-to-escape-liquid-template-tags">이런 문법</a>에 따라 수동으로 잘 제거하는 수 밖에 없다.</li>
<li>핵심적으로 한글로 된 제목 때문에 가장 고생이 심했다. 아주 오래전에 쓴 글들은 제목은 한글, slug는 한글을 URL로 바꾼 %xx%yy와 같은 형식이었다. 이걸 다시 제대로된 유니코드로 역변환(unquote)해서 파일을 만들었는데 rake preview로 살펴보면 한글 URL 포스트에 접근이 안되는 것이었다. 몇 시간동안 삽질을 해본 결과 로컬 서버인 Webrick의 문제인지, GitHub에 올리니까 잘 되는 것이었다. 여기서의 교훈: slug는 영문을 애용할 것!!</li>
</ul>

]]></content>
  </entry>
  
</feed>
