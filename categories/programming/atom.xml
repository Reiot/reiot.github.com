<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Social Reiot]]></title>
  <link href="http://reiot.com/categories/programming/atom.xml" rel="self"/>
  <link href="http://reiot.com/"/>
  <updated>2012-01-22T10:06:24+09:00</updated>
  <id>http://reiot.com/</id>
  <author>
    <name><![CDATA[Ray Yun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery Proven Performance Tips &amp; Tricks]]></title>
    <link href="http://reiot.com/2011/07/09/jquery-proven-performance-tips-tricks/"/>
    <updated>2011-07-09T10:46:11+09:00</updated>
    <id>http://reiot.com/2011/07/09/jquery-proven-performance-tips-tricks</id>
    <content type="html"><![CDATA[<p><a href="http://www.slideshare.net/AddyOsmani/jquery-proven-performance-tips-tricks">jQuery Proven Performance Tips &amp; Tricks</a> 간단 요약</p>

<ul>
<li>최신 버전을 사용해라. (1.4 보다 1.6이 2배 가까이 빠르다)</li>
<li>id 선택자가 class 선택자보다 5-10배 이상 빠르다.</li>
<li>가상 선택자는 느리니까 최대한 쓰지 말 것. 검색 영역의 모든 요소를 다 뒤진다!!</li>
<li>부모에서 자식을 찾는 방법은 $parent.find('.child') 가 제일 빠르다. 다른 것은 잊어라. (근데 왜 children() 이 더 안빠르지..)</li>
<li>jQuery 객체는 꼭 필요할 때에만 만들 것.</li>
<li>항상 캐싱할 것</li>
<li>체인 방식을 애용할 것. 이미 필터링된 집합을 이용하므로 빠르다. 코드도 간단해진다.</li>
<li>bind, live 보다 delegate가 좋다!</li>
<li>DOM insert/append 는 가급적 한번에 끝낼 것. 무거운 연산을 해야 할 경우 일단 detach 했다가 다시 넣으면 좋다.</li>
<li>$.each() 는 느리니까 그냥 for 를 쓸 수 있으면 써라.</li>
<li>$.method 보다 로레벨 함수인 $.fn.method 가 빠르다.</li>
</ul>


<p>대체로 아는 이야기라는 점이 슬프다. 그걸 아는 놈이 짠 코드가 이 모양이라니.. ㅠㅠ</p>

<p>그나저나 jsperf.com 같은 걸로 브라우저별로 검증해보지 않으면 다 공허한 이야기인 듯. 재미있는 건 IE 6/7 클래스 선택자의 속도가 다른 브라우저보다 1000-2000배 느리다는 점과, 크롬 13.x 의 성능이 갑자기 앞뒤버전보다 확 떨어졌다는 것. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Mobile Tip]]></title>
    <link href="http://reiot.com/2011/06/18/jquery-mobile-tip/"/>
    <updated>2011-06-18T23:18:35+09:00</updated>
    <id>http://reiot.com/2011/06/18/jquery-mobile-tip</id>
    <content type="html"><![CDATA[<p>jQuery Mobile(이후 jQM)으로 아이패드용 클리앙 뷰어를 만든 경험을 토대로 팁을 정리했습니다. 이후, 편의상 경어를 사용합니다.</p>

<h2>data-xxx</h2>

<p>jQM의 위젯들은 다른 jQuery 위젯이나 플러그인들과는 달리 자바스크립트로 옵션을 지정하는 대신, HTML 의 data- 속성을 이용해서 모양새와 동작을 지정한다.</p>

<p>가장 중요한 것은 data-role 속성인데, HTML 태그에 page, header, content, footer 에서부터 listview, navibar, button 등의 "역할"을 지정하면, jQM이 알아서 적당한 렌더링 해준다는 거다. 이를 통해서 자바스크립트 코드는 거의 손대지도 않고 순수 HTML 만으로 깔끔한 모바일 뷰를 만들어낼 수 있게 된다.</p>

<p>예를 들어 버튼을 만들어야 된다고 하자. 단순한 anchor 에 data-role="button" 속성을 넣는 것만으로 버튼을 만들 수 있다. 버튼 아이콘은 data-icon 으로 바꾸고, 페이지 전환 애니메이션이 필요할 경우 data-transition= slide | slideup | slidedown | pop | flip | fade 을 사용하면 되고, 또 data-direction="reverse" 으로 애니메이션 방향을 반대로 바꿀 수 있다. 만약 페이지 전환이 아니라 다이얼로그를 띄워야 할 때 anchor.rel 속성처럼 data-rel="dialog" 속성을 지정하면 된다.</p>

<p>이 모든 것이 JS 코드 한줄 없이도 자동적으로 이루어지게 만든, jQM 개발팀에게 박수를 보낸다.</p>

<h2>페이지와 캐싱</h2>

<p>페이지는 보통 header - content - footer 로 나뉘는, jQM의 가장 핵심적인 구성 요소다. 그냥 모바일 화면의 하나의 뷰라고 생각하면 된다. HTML 파일 안에 여러 개의 페이지들이 존재할 수 있다. 보통은 각 페이지들 마다 #id 를 붙여두면 되긴 한데, AJAX 로 읽어오는 페이지들의 하위 요소(예를 들면 listview)에 #id를 붙여서 jQuery로 접근하는 것은 가급적 피해야 한다.</p>

<p>왜냐하면 모바일 환경의 특성상 이미 방문했던 페이지에 대해서 다시 서버에 요청을 하지 않기 위해서, jQM은 이미 한번 방문했던 페이지들은 URL 을 해쉬한 키값으로 DOM 에 저장한 후 숨겨버린다. 그러므로, 동일한 #id 를 가진 페이지가 캐싱될 경우 자바스크립트에서 검색하는 게 불가능하므로, 현재 화면에 보이는 페이지를 기준으로 CSS 클래스로 찾는 것을 권한다.</p>

<p>그냥 페이지 전환이 발생하면 항상 div.data-role="page" 라는 게 무조건 추가된다고 생각하면 이해가 빠를 듯하다. 참고로 로컬 캐싱된 이런 페이지들에 대해 히스토리(Back-Forward) 이동을 적용하기 위해서 yourdomain.com/#/some/where 등의 로컬 주소로 변환된다는 점에 유의할 것.(트위터에서 쓰는 방식이랑 비슷한건데, 뭔가 이걸 가리키는 용어가 있었던 듯... 가물가물..)</p>

<h2>ul-li-thumb 문제</h2>

<p>리스트 아이템(li) 바로 아래에 이미지 태그를 넣어두면, jQM은 자동적으로 트위터와 같은 2단 레이아웃으로 바꾼다. 내부적으로 이미지에 ul-li-icon 또는 ul-li-thumb 클래스를 붙이고 li 에다가도 ul-li-has-thumb 같은 클래스를 붙여서 크기와 너비, 마진을 설정해버린다.</p>

<p>한편으로는 좋은 기능이지만, 원치않는 경우라고 해도 이미지 크기가 강제로 줄어들게 된다. 해결책은 리스트 바로 아래 자식 이미지를 다른 태그로 둘러싸서 jQuery 검색에 걸리지 않게 만들면 된다.</p>

<p>see also: <a href="http://forum.jquery.com/topic/latest-release-list-thumbnail-issue">http://forum.jquery.com/topic/latest-release-list-thumbnail-issue</a></p>

<h2>터치 이벤트 사용하기</h2>

<p>데스크탑에서 개발하다가 아이패드에서 테스트해보니 유독 내가 만든 버튼만 클릭이 잘 안먹는 경우가 있어서 뭔가 했는데, 가만히 생각해보니 click 이벤트와 touch 이벤트는 별개라는 사실을 잠시 잊어서 생긴 문제였다. 항상 tap (tab 이 아니다) 이벤트를 click 과 함께 등록해야 된다 :)</p>

<h2>fixed header &amp; footer</h2>

<p>data-position="fixed" 를 이용하면 헤더나 푸터를 스크롤에 관계없이 화면에 고정할 수 있다. 스크롤 할 때에는 사라져서 편한 거 같은데, 막상 아이패드에서는 이게 번쩍거리거나 프레임을 떨어뜨리는 문제가 있으므로 적당히 사용해야 할 거 같다. 나도 처음에는 긴 글이 있을 때 넣으면 좋겠거니 했는데, 워낙 깜빡임이 심해서 빼버렸다. 페이지 전환 애니메이션도 너무 과하면 곤란한 듯하다.</p>

<h2>$.mobile.ajaxEnabled = false</h2>

<p>기본적으로, 링크를 클릭하면 jqm은 이동하려는 페이지가 DOM에 없을 때에만, ajax()를 호출해서 페이지를 자동으로 만든다.  그런데 backbone 같은 MVC 라이브러리를 사용할 경우, 이런 흐름은 달라져야 된다. 사용자가 링크를 클릭하면 관련된 모델을 fetch 하고 컬렉션을 적당히 변경한 후, 페이지는 backbone 뷰가 자동으로 만들어주는 느낌이 가장 어울릴 것이다. 즉 ajaxEnabled 옵션을 끄고 관련된 이벤트들을 직접 바인딩해서 처리하면 된다.</p>

<h2>소소한 팁들</h2>

<ul>
<li>버튼을 헤더의 오른 편으로 정렬하기 : 버튼의 class 속성에 ui-btn-right 를 추가하면 된다.</li>
<li>data-backbtn="false": jQM 1.0a4.1 까지는 페이지 전환시 자동적으로 헤더에 Back 버튼이 추가되므로, 돌아가기 버튼이 필요없는 메인 페이지 등에서는 이 속성을 지정하면 된다.</li>
<li>원치않는 nested list : ul-li-thumb 와 마찬가지로 li 바로 아래에 ul 이나 ol 이 있으면 자동적으로 페이지가 만들어지므로, 다른 태그로 둘러싸면 된다.</li>
<li>사용자가 추가한 버튼에 live("click tap") 을 지정하면 이벤트가 2개 발생되는 모양이다. 그냥 tap 만 넣어도 컴퓨터에서는 잘 동작한다.</li>
<li>자바스크립트로 리스트 아이템을 추가한 후 listview("refresh")를 해도 그 안에 있는 inset listview 는 별도의 쿼리를 통해서 listview 위젯으로 만들어야 한다.</li>
</ul>


<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/Reiot/CpudD/embedded/js,resources,html,css,result/light/"></iframe></p>

<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[clienpad.appspot.com]]></title>
    <link href="http://reiot.com/2011/06/18/clienpad-appspot-com/"/>
    <updated>2011-06-18T22:22:39+09:00</updated>
    <id>http://reiot.com/2011/06/18/clienpad-appspot-com</id>
    <content type="html"><![CDATA[<p><img src="http://boxcatstudio.files.wordpress.com/2011/06/clienpad.png"></p>

<p>와이프가 아이패드에서 클리앙을 보시는게 너무 불편해 보여서, jQuery Mobile 공부 삼아 간단히 웹앱을 만들어봤습니다. 소스 코드는 GitHub 에 공개해두었습니다.</p>

<ul>
<li>주소: <a href="http://clienpad.appspot.com">http://clienpad.appspot.com </a></li>
<li>소스코드: <a href="http://github.com/Reiot/clienpad">https://github.com/Reiot/clienpad</a></li>
</ul>


<p>Google App Engine 으로 프록시 서버를 만들었고, jQuery Mobile을 이용해서 모바일 브라우저에서 JSON 으로 받아서 보여주는 방식입니다. 가능하면 프록시 서버 없이 하고 싶었는데 iOS 에서 돌아가도록 할려다 보니 방법이 없더군요.</p>

<p>구현에 관련해서 간단히 정리해보자면,</p>

<ul>
<li>template 의 최신 기능 때문에 django 1.2 를 이용했는데, 코드 레벨에서는 거의 webapp 만 사용했습니다;;;</li>
<li>memcache 에 각 URL 을 파싱한 dict를 저장하는데, 60초 정도만 살아남도록 했습니다. 그래서 그런지 처음 접속하는 사람은 제법 느린 편입니다. 반응 속도가 4-5초 정도가 나오는 바람에 와이프가 많이 실망하네요. ㅠㅠ 다시 생각해보니 그냥 JSON 이나 렌더링된 문자열 자체를 저장하는게 나을 수 있겠네요.</li>
<li><a href="http://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a> 으로 HTML DOM 파싱을 했습니다. 클리앙의 HTML 구조가 old-school 같아서 (ㅎㅎ) 시간이 좀 걸렸습니다;;;</li>
</ul>


<p>조만간 jQuery Mobile 팁에 관한 글을 좀 써보겠습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ant Cookbook]]></title>
    <link href="http://reiot.com/2011/04/15/ant-cookbook/"/>
    <updated>2011-04-15T00:17:53+09:00</updated>
    <id>http://reiot.com/2011/04/15/ant-cookbook</id>
    <content type="html"><![CDATA[<h2>Property vs. Var</h2>

<p>상수인 Property은 하위 Target 에게 보이지 않지만, 변수인 Var 는 보인다.</p>

<h2>특정 확장자를 가진 파일만 삭제하기(recursive)</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;delete&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>fileset dir=&quot;${dir}/..&quot; includes=&quot;## /*.js&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/delete&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>특정 폴더 이하 모든 하위 폴더를 삭제하기(빈 폴더 포함)</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;delete</span> <span class="na">includeemptydirs=</span><span class="s">&quot;yes&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>fileset dir=&quot;${dir}&quot; includes=&quot;## /*&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/delete&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>정규식을 이용해서 파일 이름 바꾸기</h2>

<p>apply task 보다는 move task + regexpmapper 를 이용하면 간단하다. move 는 대상 폴더가 없으면 무조건 만들기 때문에 편하다!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!--</span>
</span><span class='line'><span class="c">&lt;apply executable=&quot;mv&quot;&gt;</span>
</span><span class='line'><span class="c">    &lt;fileset dir=&quot;${dir}&quot; includes=&quot;*.png&quot;/&gt;</span>
</span><span class='line'><span class="c">    -v&quot;/&gt;</span>
</span><span class='line'><span class="c">    &lt;srcfile/&gt;</span>
</span><span class='line'><span class="c">    &lt;targetfile/&gt;</span>
</span><span class='line'><span class="c">    &lt;regexpmapper from=&quot;^_\d\d\d\d_(.*)\.png$&quot; to=&quot;${dir}/\1.png&quot;/&gt;</span>
</span><span class='line'><span class="c">&lt;/apply&gt;</span>
</span><span class='line'><span class="c">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;move</span> <span class="na">todir=</span><span class="s">&quot;${dir}&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>fileset dir=&quot;${dir}&quot; includes=&quot;*.png&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>regexpmapper from=&quot;_\d\d\d\d_(.*)\.png&quot; to=&quot;\1.png&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/move&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>경로에서 부모 폴더(dirname)와 파일명(basename)으로 분리하기</h2>

<p>basename 의 suffix 를 지정하면 확장자 없는 순수 파일명만 저장할 수 있다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>dirname property=&quot;parentdir&quot; file=&quot;${file}&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>basename property=&quot;basename&quot; file=&quot;${file}&quot; suffix=&quot;.png&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>파일명에 정규식을 적용해서 속성에 저장하기</h2>

<p>propertyregex 를 이용하면 된다. 이때 디폴트값을 정해줄 수도 있다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>propertyregex property=&quot;output&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>input=&quot;${file}&quot;
</span><span class='line'>regexp=&quot;(.+?)_(.+)&quot;
</span><span class='line'>select=&quot;\2&quot;
</span><span class='line'>defaultValue=&quot;${default}&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>하위 폴더 각각에 대해서 특정 타겟을 실행하기</h2>

<p>foreach task 를 이용하면 된다. 이때 dirset 은 항상 부모 폴더 자신(./)을 포함하는데, excludes=./ 등으로 자신을 제거할 수 없으므로, 아래처럼 includes=*/##  으로 제외할 수 있다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;foreach</span> <span class="na">param=</span><span class="s">&quot;dir&quot;</span> <span class="na">target=</span><span class="s">&quot;xxx&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>path<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>dirset dir=&quot;${parentdir}&quot; includes=&quot;*/## &quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/path<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/foreach&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Exec vs. Apply</h2>

<p>exec 는 커맨드라인 명령을 1회 실행하지만, apply 는 특정 집합에 대해서 for 루프처럼 실행이 가능하다.
이때 arg value 는 -v 나 -f 같은 단일 파라미터이고, arg line 은 --output xxx 처럼 공백이 들어가는 긴 파라미터에 사용한다.
또한 regexpmapper 를 이용해서 targetfile 에 대해 정규식을 적용할 수도 있다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;exec</span> <span class="na">executable=</span><span class="s">&quot;${file.python}&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>arg value=&quot;trim.py&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>arg value=&quot;--verbose&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>arg line=&quot;--json ${trim.dir}/anchor.json&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>arg value=&quot;${trim.dir}&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/exec&gt;</span>
</span><span class='line'><span class="nt">&lt;apply</span> <span class="na">executable=</span><span class="s">&quot;${file.python}&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>fileset dir=&quot;${flip.dir}&quot; includes=&quot;*.png&quot; excludes=&quot;*.r.png&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>arg value=&quot;flip.py&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>arg value=&quot;--verbose&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>arg value=&quot;-o&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>targetfile/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>srcfile/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>regexpmapper from=&quot;(.*)\.png$&quot; to=&quot;${flip.dir}/${flip.default}.png&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/apply&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>파일 출력</h2>

<p>echo task를 이용하면 화면 출력 뿐만 아니라, 파일에 임의의 문자열을 append를 할 수 있다. 이걸 이용하면 concat task 를 쓰지 않고도 header 나 footer 를 간단하게 넣을 수 있다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;echo</span> <span class="na">file=</span><span class="s">&quot;${script}&quot;</span> <span class="na">append=</span><span class="s">&quot;yes&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>sprites = sprites || {};
</span><span class='line'>sprites.data = sprites.data || {};
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/echo&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>파일 이어붙일 때 필터링하기</h2>

<p>filterchain 을 이용해서 특정 문자열을 포함한 라인을 제거하거나, tokenfilter + replaceregex 를 이용해서 문자열을 바꿀 수도 있다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;concat</span> <span class="na">destfile=</span><span class="s">&quot;${script}&quot;</span> <span class="na">append=</span><span class="s">&quot;yes&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>path<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>filelist dir=&quot;${dir}&quot; files=&quot;${json}&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/path<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>filterchain<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>linecontains negate=&quot;true&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>contains value=&quot;trimmed&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/linecontains<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>tokenfilter<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>!--
</span><span class='line'>        <span class="ni">&amp;lt;</span>replaceregex pattern=&quot;\{&quot;frames&quot;\:&quot; replace=&#39;sprites[&quot;${spritename}&quot;] =&#39; flags=&quot;g&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>        --<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>!-- remove .<span class="ni">&amp;lt;</span>span class=&quot;hiddenSpellError&quot; pre=&quot;remove &quot;<span class="ni">&amp;gt;</span>png<span class="ni">&amp;lt;</span>/span<span class="ni">&amp;gt;</span> --<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>replaceregex pattern=&quot;\.png&quot; replace=&#39;&#39; flags=&quot;g&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/tokenfilter<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/filterchain<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/concat&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>파일을 복사하면서 이름 바꾸기</h2>

<p>copy task 와 globmapper 를 쓰면 파일을 복사하면서 단순하게 이름을 바꿀 수 있다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;copy</span> <span class="na">todir=</span><span class="s">&quot;${destdir}&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>fileset dir=&quot;${srcdir}&quot; includes=&quot;*.png&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/copy&gt;</span>
</span><span class='line'><span class="nt">&lt;copy</span> <span class="na">todir=</span><span class="s">&quot;${destdir}&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>filelist dir=&quot;${srcdir}&quot; files=&quot;${src}.js&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>mapper type=&quot;glob&quot; from=&quot;*.js&quot; to=&quot;sprite.*.js&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/copy&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>명령 실행시 입력 리다이렉트 적용하기</h2>

<p>잘 알려지진 않았지만, 구글 앱엔진의 패스워드를 파일에 저장한 후, <strong>appcfg.py --passin &lt; file</strong> 을 이용하면 자동화가 가능하다. ant 에서는 exec 의 inputstring 으로 대체할 수 있다.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;exec</span> <span class="na">executable=</span><span class="s">&quot;appcfg.py&quot;</span> <span class="na">inputstring=</span><span class="s">&quot;${bulkload.pass}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;${bulkload.cmd}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;arg</span> <span class="na">line=</span><span class="s">&quot;--application=${bulkload.appid}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;--config_file=${bulkload.config}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;--email=${bulkload.email}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;--url=${bulkload.url}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;--kind=${bulkload.kind}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;--filename=${bulkload.csv}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;--no_cookies&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;--passin&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;.&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/exec&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bulkloader GData Connector]]></title>
    <link href="http://reiot.com/2011/04/14/bulkloader-gdata-connector/"/>
    <updated>2011-04-14T14:01:53+09:00</updated>
    <id>http://reiot.com/2011/04/14/bulkloader-gdata-connector</id>
    <content type="html"><![CDATA[<p>구글 앱엔진은 데이터스토어의 내용을 로컬 파일로 내려받거나 올리는 벌크로딩을 지원한다. 그런데 막상 기획 데이터와 실시간 연동하려면, 스프레드시트를 편집한 후 CSV로 '하나씩' 다운받아서 다시 콘솔창에서 appcfg.py 로 '한 종류씩' 올려야 하는, 상당히 피곤한 과정을 거쳐야 한다.</p>

<p>만약 구글 스프레드시트의 데이터를 바로 데이터스토어로 올리고 내릴 수 있다면 얼마나 편할까? 해서 스프레드시트 API 를 써서 직접 만들어봤는데, Model 당 import/export/create 코드를 각각 작성해야 하는 단점이 있었다. 그런데, 이미 bulkloader.yaml 를 만들어서 관리중이라면, 아래 커넥터를 써서 간단하게 구현할 수 있다.</p>

<p><a href="http://code.google.com/p/bulkloader-gdata-connector/">http://code.google.com/p/bulkloader-gdata-connector/</a></p>

<p>기본적인 사항들은 <a href="http://code.google.com/p/bulkloader-gdata-connector/wiki/GettingStarted">가이드 문서</a>를 읽어보면 되고, 아래 다음 사항들을 참고하면 된다.</p>

<ul>
<li>django 1.2 를 사용할 경우, 코드 맨 위에    use_library('django', '1.2')를 추가할 것. 그렇지 않으면 무서운 0.96.4 is already in use 에러를 맛보리라.</li>
<li>구글앱스 도메인을 사용할 경우 GenerateAuthSubURL(..., domain='yourapps.com') 을 추가할 것.</li>
<li>컬럼 이름에는 공백, underscore(_), 대문자를 사용하면 안된다.</li>
<li>내보내기는 제법 오랜 시간이 걸리지만, 불러오는 건 꽤 빠르다. 즉 최초에 한번 내보내고 그 다음부터는 금방 금방 불러올 수 있다는 뜻이다. :)</li>
<li>단점이라면, 데이터를 불러오려면 콘솔 즉 프로그래머의 개입(==패스워드 입력)이 필요하다는 점이다. 웹 기반 UI 에서 Connector를 어찌어찌 잘 부를 수 있으면 좋겠는데, 워낙 코드가 복잡해서;;</li>
</ul>

]]></content>
  </entry>
  
</feed>
